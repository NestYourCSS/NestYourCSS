@starting-style {
	#mainContent > #textSide > header :is(menu > button, hgroup > :is(h1, h3)),
	#mainContent > #textSide > figure > :is(figcaption, figcaption + div),
	#mainContent > #editorSide > #codeEditor .editorWrapper {
		opacity: 0;
	}

	#inputEditorWrapper {
		display: none;
		background-color: transparent;
	}
}
/* The actual main CSS file for this website */

:root {
    font-size: clamp(0px, 1.5dvh, 24px);

	--pri-colour-hue: oklch(none none 235);
	--pri-colour-darkest: oklch(from var(--pri-colour-hue) 20% 0.0424 h); /* #051823 */
    --pri-colour-em-darker: oklch(from var(--pri-colour-hue) 25% 0.0424 h); /* #092533 */
    --pri-colour-m-darker: oklch(from var(--pri-colour-hue) 40% 0.0679 h); /* #1c4d67 */
    --pri-colour-darker: oklch(from var(--pri-colour-hue) 55% 0.0935 h); /* #307aa0 */
    --pri-colour-medium: oklch(from var(--pri-colour-hue) 75% 0.1278 h); /* #4dbaf3 */
    --pri-colour-lighter: oklch(from var(--pri-colour-hue) 85% 0.0821 h); /* #98d7fc */
    --pri-colour-lightest: oklch(from var(--pri-colour-hue) 90% 0.0522 h); /* #bde4fc */

	--sec-colour-hue: oklch(none none 205);
	--sec-colour-darkest: oklch(from var(--sec-colour-hue) 20% 0.0424 h); /* #001a1d */
    --sec-colour-em-darker: oklch(from var(--sec-colour-hue) 25% 0.0424 h); /* #00272b */
    --sec-colour-m-darker: oklch(from var(--sec-colour-hue) 40% 0.0679 h); /* #015259 */
    --sec-colour-darker: oklch(from var(--sec-colour-hue) 55% 0.0935 h); /* #02818b */
    --sec-colour-medium: oklch(from var(--sec-colour-hue) 75% 0.1278 h); /* #03c4d4 */
    --sec-colour-lighter: oklch(from var(--sec-colour-hue) 85% 0.0821 h); /* #8aDee7 */
    --sec-colour-lightest: oklch(from var(--sec-colour-hue) 90% 0.0522 h); /* #b6e9ee */

	--red-colour-hue: oklch(none none 15);
	--red-colour-darkest: oklch(from var(--red-colour-hue) 20% 0.0424 h); /* #230f11 */
    --red-colour-em-darker: oklch(from var(--red-colour-hue) 25% 0.0424 h); /* #33191b */
    --red-colour-m-darker: oklch(from var(--red-colour-hue) 40% 0.0679 h); /* #67383c */
    --red-colour-darker: oklch(from var(--red-colour-hue) 55% 0.0935 h); /* #a15a60 */
    --red-colour-medium: oklch(from var(--red-colour-hue) 75% 0.1278 h); /* #f48a94 */
    --red-colour-lighter: oklch(from var(--red-colour-hue) 85% 0.0821 h); /* #ffb8bc */
    --red-colour-lightest: oklch(from var(--red-colour-hue) 90% 0.0522 h); /* #ffd1d3 */

	--shades-hue: oklch(none none 360);
	--shades-darkest: oklch(from var(--shades-hue) 20% c h); /* #161616 */
    --shades-em-darker: oklch(from var(--shades-hue) 25% c h); /* #222222 */
    --shades-m-darker: oklch(from var(--shades-hue) 40% c h); /* #484848 */
    --shades-darker: oklch(from var(--shades-hue) 55% c h); /* #717171 */
    --shades-medium: oklch(from var(--shades-hue) 75% c h); /* #aeaeae */
    --shades-lighter: oklch(from var(--shades-hue) 85% c h); /* #cecece */
    --shades-lightest: oklch(from var(--shades-hue) 90% c h); /* #dedede */

    --shades-black: black;
    --shades-white: white;
    
    --opacity-low: 0.25;
    --opacity-medium: 0.50;
    --opacity-high: 0.75;
	
	/* I need to update the code accordingly at some point: */
	--vh: 1vh;
	--dvh: var(--vh);
	--dvh: 1dvh;
	--svh: var(--vh);
	--svh: 1svh;
	--lvh: var(--vh);
	--lvh: 1lvh;
}

/* Match any & all hex codes */
/* #([0-9a-f]{3}|[0-9a-f]{6}|[0-9a-f]{8})(?=[^0-9a-z]) */
/* #([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})(?=[^0-9a-zA-Z]) */

* {
	box-sizing: border-box;

	&[hidden] {
		display: none;
	}
}

html {
	background-color: var(--shades-black);
	/* scroll-behavior: smooth; */

    overflow: hidden;

	::-webkit-scrollbar {
		width: 0;
	}
}

body {	
    margin: 0;
	height: 100dvh;
	background-color: var(--shades-black);

	> #siteWrapper {
		margin: 0 auto;
		width: clamp(0px, 100%, 3200px);
		height: 100dvh;
		contain: paint;
		overflow: hidden auto;
		animation: lightenBackgroundColour linear 1ms;
		animation-timeline: scroll(self);

		&:has(> .nesting) {
			overflow: hidden;
		}

		> main {
			--padding: 2rem;
			display: flex;
			justify-content: flex-end;
			height: 96dvh;
			width: 100%;
			padding: var(--padding);

			> #mainSettings {
				flex: 0;
				height: 100%;
				min-width: 0;
				margin-right: 0;
				display: flex;
				flex-direction: column;
				contain: paint inline-size;
				gap: var(--padding);
				overflow: hidden auto;
				transition: margin-right 2s, min-width 2s;

				> section {
					border-radius: 3rem;
					--panel-background: color-mix(in srgb, var(--shades-darkest), var(--shades-black) 75%);
					background-color: var(--panel-background);
					padding: var(--padding);
					min-width: 58.441558ch;
					display: flex;
					flex-direction: column;
					gap: var(--padding);
					font-family: 'Poppins', 'Calibri', sans-serif;

					/* &:not(:nth-last-child(1)) { display: none; } */

					> h2 {
						margin: 0;
						font-size: 1.25rem;
						font-weight: normal;
						color: var(--shades-medium);
					}

					> ul {
						list-style: none;
						margin: 0;
						padding: 0;
						display: flex;
						flex-direction: column;
						--component-gap: calc(var(--padding) / 4);
						--component-background: color-mix(in srgb, var(--shades-black), var(--shades-darkest));
						--component-background-selected: linear-gradient(to right, var(--shades-m-darker), var(--shades-em-darker));
						--component-box-shadow-selected: inset 0 calc(1rem / 16) oklch(100% none none / var(--opacity-low));
						--component-text: color-mix(in srgb, var(--shades-darker), var(--shades-medium));
						--component-text-hover: var(--shades-medium);
						gap: var(--component-gap);


						> li {
							display: grid;
							grid-template-columns: repeat(8, 1fr);

							> label {
								cursor: auto;
								grid-column: span 3;
								align-content: center;
								font-size: 1.125rem;
								font-weight: 300;
								color: var(--component-text);

								> p {
									margin: 0;
									font-size: 0.625rem;
									color: var(--shades-m-darker);
								}
							}

							> div {
								grid-column: span 5;
								display: flex;
								flex-direction: row;
								justify-content: space-between;
								gap: var(--component-gap);
								color: var(--component-text);
								font-size: 1rem;

								#typefaces {
									flex: 1;
								}

								#fontsizes {
									width: auto;
									margin: 0;
									flex: 0;
								}

								#indentationType {
									flex: 1;
								}

								#indentationSize {
									flex: 0;
									display: flex;
									align-items: center;
									gap: var(--component-gap);
								}

								#coordinates {
									flex: 1;
								}

								#mode {
									flex: 1;
								}

								#auto {
									flex: 1;
								}
								
								#externalCss {
									flex: 1;
									max-width: 100%;
								}

								#samples {
									flex: 1;
								}

								/* Components */

								.dropdown,
								.combobox {
									user-select: none;
									display: inline-flex;
									flex-direction: column;
									width: auto;
									margin: 0;
									text-align: left;
									box-sizing: content-box;
									position: relative;

									> input {
										appearance: none;
										position: absolute;
										margin: 0;
									
										&:checked {
											+ output {
												border-radius: 1rem 1rem 0 0;
											}
									
											~ ul {
												position: absolute;
												z-index: 999;
												top: 100%;
												width: 100%;
												display: flex;
												margin: 0;
												margin-top: 0.25rem;
												padding: 1em;
												gap: 0.5em;
												flex-direction: column;
												background: var(--component-background);
												border-bottom-left-radius: 1rem;
												border-bottom-right-radius: 1rem;
												box-shadow: 0px 10px 10px 2.5px rgb(from var(--shades-black) r g b / 0.5);

												> li {
													overflow: hidden;
													text-overflow: ellipsis;

													&:hover {
														color: var(--component-text-hover);
														cursor: pointer;
													}
											
													&:focus {
														color: var(--component-text-hover);
														outline: none;
													}

													&:disabled {
														color: rgb(from var(--component-text) r g b / 0.5);
														cursor: not-allowed;
		
														&:hover {
															color: inherit;
														}
													}
												}
											}
										}
									}
									
									> output {
										cursor: pointer;
										white-space: nowrap;
										text-overflow: ellipsis;
										overflow: clip;
										background: url("data:image/svg+xml,%3Csvg fill='%23484848' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11.178 19.569a.998.998 0 0 0 1.644 0l9-13A.999.999 0 0 0 21 5H3a1.002 1.002 0 0 0-.822 1.569l9 13z'%3E%3C/path%3E%3C/svg%3E") right 1rem top 50% / 1ch no-repeat, var(--component-background);
										border-radius: 1rem;
										padding: 1rem;
										padding-right: calc(1rem + 2ch);
										
										&:hover {
											color: var(--component-text-hover);
										}
									}
									
									&:has(:focus, :focus-visible, :active) output {
										outline: none;
										box-shadow: 0 0 2em var(--shades-black);
									}
								}

								.number {
									user-select: none;
									position: relative;
									width: fit-content;
									color: var(--component-text);
									border: none;
									padding: 1rem;
									gap: calc(2 * var(--component-gap));
									background: var(--component-background);
									border-radius: 1rem;
								
									&:hover {
										color: var(--component-text-hover);
									}
								
									:focus {
										outline: none;
										box-shadow: 0 0 2em var(--shades-black);
									}

									> output > span {
										cursor: auto;
										display: inline-block;
										padding-right: 2ch;

										+ div {
											position: absolute;
											width: 1ch;
											top: 50%;
											right: 1rem;
											translate: 0 -50%;
											display: flex;
											flex-direction: column;
											gap: 0.25em;

											> svg {
												cursor: pointer;
											}
										}
									}
								}

								.checkbox {
									user-select: none;
									position: relative;
									display: flex;
									border-radius: 1rem;
									background: var(--component-background);
									
									&::before {
										position: absolute;
										content: '';
										height: 100%;
										left: 0%;
										width: 50%;
										border-radius: inherit;
										background: var(--component-background-selected);
										box-shadow: var(--component-box-shadow-selected);
										z-index: 0;
										transition: 0.25s;
									}

									&:has(:checked)::before {
										left: 50%;
									}

									> input {
										appearance: none;
										position: absolute;
										margin: 0;
									}

									> span {
										position: relative;
										cursor: pointer;
										flex: 1;
										padding: 1rem 2.5ch;
										text-align: center;
										align-content: center;
								
										&:hover {
											color: var(--component-text-hover);
										}
									}
								}

								.radio-group {
									user-select: none;
									display: flex;
									gap: var(--component-gap);

									> label {
										flex: 1;
										cursor: pointer;
										padding: 1rem 1.75ch;
										text-align: center;
										align-content: center;
										border-radius: 1rem;
										--top-colour: var(--shades-m-darker);
										--bottom-colour: var(--shades-em-darker);
										background: linear-gradient(to bottom, var(--top-colour), var(--bottom-colour) 45%, var(--component-background) 55%) 0% 100% / 100% 210% no-repeat, var(--component-background);
										transition: background-position 0.125s ease-out;

										&:has(:disabled) {
											&, &:hover {
												--shades-true-darkest: color-mix(in srgb, var(--shades-black), var(--shades-darkest));
												background: linear-gradient(to bottom, var(--shades-black), var(--shades-true-darkest));
												box-shadow: inset 0 calc(-1rem / 16) var(--shades-darkest);
												color: var(--shades-m-darker);
												cursor: not-allowed;
											}
										}

										&:has(:checked) {
											box-shadow: var(--component-box-shadow-selected);
											background-position: 0% 0%;
										}
								
										&:hover {
											color: var(--component-text-hover);
										}

										> input {
											appearance: none;
											position: absolute;
											margin: 0;
										}
									}

									&.button {
										> label {
											--top-colour: var(--sec-colour-m-darker);
											--bottom-colour: var(--pri-colour-darkest);
										}
									}
								}

								.combobox { 
									> output {
										
										&&:hover > div:empty::before {
											color: var(--shades-darker);
										}

										div {
											cursor: auto;
											overflow: hidden;
											text-overflow: ellipsis;
											
											&:focus {
												outline: none;
												overflow-x: scroll;
												scrollbar-width: none;
												text-overflow: clip;
											}

											&:not(:focus):empty {
												align-content: center;
												font-size: 75%;
												padding: 0.25em 0;

												&::before {
													pointer-events: none;
													content: attr(placeholder);
													color: var(--shades-m-darker);
												}
											}
										}
									}
								}
							}
						}
					}

					> :has(table) {
						overflow-y: scroll;
						max-height: 16rem;
						padding: calc(var(--padding) / 2);
						border-radius: 1.5rem;
						--table-background: color-mix(in srgb, var(--shades-darkest), var(--panel-background) 75%);
						background-color: var(--table-background);
						scrollbar-width: 0.75rem;
						
						> table {
							width: 100%;
							font-size: 0.75rem;
							color: var(--shades-medium);

							> colgroup > col:last-child {
								width: 0;
							}

							> thead {
								tr {
									&:first-child th {
										font-weight: normal;
										color: var(--shades-darker);

										&:first-child {
											text-align: left;
										}
									}

									&:last-child th {
										font-weight: normal;
										color: var(--shades-m-darker);
									}
								}
							}

							> tbody {
								&:empty:before {
									content: "There are no errors.";
								}

								> tr {
									color: var(--shades-medium);
									cursor: pointer;
									font-weight: normal;

									&:hover {
										background-color: rgb(from var(--shades-em-darker) r g b / var(--opacity-low));
									}

									> td:not(:first-child) {
										text-align: center;
									}
								}
							}
						}

						--track-colour: color-mix(in srgb, var(--shades-black), var(--panel-background) 75%);
						--thumbnail-colour: var(--shades-m-darker);
						--scrollbar-padding: 4px;
						--scrollbar-width: 12px;

						/* Non-Standard Properties */
						@supports selector(::-webkit-scrollbar) {
						  &::-webkit-scrollbar {
							width: var(--scrollbar-width);
							height: var(--scrollbar-width);
						  }
					  
						  &::-webkit-scrollbar-thumb {
							background: var(--thumbnail-colour);
							border-radius: 999px;
							border: var(--scrollbar-padding) solid transparent;
							background-clip: padding-box;
						  }
					  
						  &::-webkit-scrollbar-track {
							background: var(--track-colour);
							border-radius: 999px;
						  }
						}
					  
						/* Standard Properties */
						@supports not selector(::-webkit-scrollbar) {
						  scrollbar-color: var(--thumbnail-colour) var(--track-colour);
						  scrollbar-width: thin;
						}
					}
				}

				> menu {
					display: inline-flex;
					padding: 0 4ch;
					justify-content: space-evenly;
					margin: 0;
				
					> a {
						display: grid;
						--icon-size: 4rem;
						grid: var(--icon-size) / var(--icon-size);
						position: relative;
						padding: 0;
						border: none;
						background: none;
						border-radius: 999px;
						
						&:nth-of-type(1) > figure { clip-path: url(#iconGithub); }
						&:nth-of-type(2) > figure { clip-path: url(#iconHistory); }
						&:nth-of-type(3) > figure { clip-path: url(#iconSettings); }
						&:nth-of-type(4) > figure { clip-path: url(#iconBug); }
						&:nth-of-type(5) > figure { clip-path: url(#iconShareYourMind); }
						
						> * {
							border-radius: inherit;
							height: 100%;
							width: 100%;
						}
				
						> figure {
							margin: 0;
							container-type: size;
							background: rgb(from white r g b / 0.25);
							
							> svg {
								contain: size;
								
								> clipPath {
									scale: 0.012;
									translate: -7cqw -11cqh;
								}
							}
							
							&.inner-cursor::after {
								pointer-events: none;
								border-radius: inherit;
								position: fixed;
								content: "";
								top: 0;
								left: 0;
								z-index: -999;
								translate: calc(var(--cursor-x-pos) - 50%) calc(var(--cursor-y-pos) - 50%);
								height: 75cqh;
								width: 75cqw;
								filter: blur(1rem);
								background-color: white;
								animation: blink 3s infinite alternate-reverse;
							}

							:is(:is(body.hidden, #siteWrapper > main.nesting:not(:hover)) &, &.hidden).inner-cursor::after {
								animation-play-state: paused;
							}
						}
					}
				}
			}

			> #mainContent {
				--background: url("../assets/images/nycss-bg-pattern.png") 0 0.1dvh / 5dvh repeat,
				linear-gradient(to right, rgb(from var(--shades-black) r g b / var(--opacity-medium)), rgb(from var(--pri-colour-em-darker) r g b / var(--opacity-medium))) 0 0 / 100dvw 100dvh,
				linear-gradient(45deg, transparent, rgb(from var(--pri-colour-m-darker) r g b / var(--opacity-medium)) 50%, transparent) 0 0 / 100dvw 100dvh,
				var(--shades-black);
				display: flex;
				justify-content: space-between;
				container-type: size;
				flex: 1;
				width: fit-content;
				position: relative;
				background: var(--background);
				border-radius: 3rem;
				transform-origin: center;

				@supports (animation-range: normal) {
					animation: scaleDown linear 1ms;
					animation-timeline: view();
					animation-range-start: contain 100%;
					animation-range-end: cover 100%;
				}
				
				> #textSide {
					width: 100%;
					height: 100%;
					display: flex;
					padding: 2rem 0;
					flex-direction: column;
					justify-content: space-between;
					container-type: inline-size;
					contain: paint;
					transition: width 2s, opacity 2s, padding 2s;
	
					> header {
						margin: 2rem 2rem 0 4rem;
						font-size: clamp(0.5rem, 16px, 1.125rem);
	
						> hgroup {
							color: rgb(from var(--shades-white) r g b / var(--opacity-high));
							font-family: 'Poppins', 'Calibri', sans-serif;
	
							> * { margin: 0; }
	
							> h3 {
								line-height: 125%;
								font-weight: 200;
								font-size: 3em;
								height: 2lh;
								width: 24ch;
								transition: opacity 3s 3s;
								transform: translateZ(0);
							}

							> h1 {
								display: inline-block;
								white-space: nowrap;
								line-height: 125%;
								font-weight: 900;
								font-size: 6em;
								transition: opacity 3s 1.5s;
	
								&:hover {
									color: var(--shades-white);
								}
							}
						}
	
						> menu {
							display: inline-flex;
							--primary-colour: var(--shades-darker);
							--secondary-colour: color-mix(in srgb, var(--shades-lightest), var(--primary-colour) 50%);
							gap: 0.33em;
							margin: 1em 0;
							padding: 0;
	
							/* Sourced from: https://codepen.io/TigerYT/pen/bNdGKQq */

							> a {
								/* --- Animation Duration & Delay Variables --- */
								  
								/* Part 1: Icon changing (on hover) */
								--anim-duration-icon-in: 0.5s;
								--anim-duration-bg-in: 0s;
								--delay-icon-in-paths: 0s;
								--delay-icon-in-bg: calc(var(--delay-icon-in-paths) + var(--anim-duration-icon-in) + 0s);
											
								/* Part 2: Text being shown (on hover) */
								--anim-duration-text-show: 0.5s;
								--anim-duration-text-opacity-show: 0.25s;
								--delay-text-show-font: calc(var(--delay-icon-in-bg) + 0s);
								--delay-text-show-opacity: calc(var(--delay-text-show-font) + var(--anim-duration-text-show) + 0s);
							  
								/* Part 3: Text being hidden (on mouse out) */
								--anim-duration-text-hide: 0.5s;
								--anim-duration-text-opacity-hide: 0.25s;
								--delay-text-hide-opacity: 0s;
								--delay-text-hide-font: 0.5s;
							  
								/* Part 4: Icon changing back (on mouse out) */
								--anim-duration-icon-out: 0.5s;
								--anim-duration-bg-out: 0s;
								--delay-icon-out-paths: calc(var(--delay-text-hide-font) + var(--anim-duration-text-hide) + 0s);
								--delay-icon-out-bg: calc(var(--delay-icon-out-paths) + 0s);

								display: flex;
								font-size: inherit;
								font-family: 'Poppins', 'Calibri', sans-serif;
								text-decoration: none;
								flex-direction: row;
								align-items: center;
								position: relative;
								padding: 0;
								border: none;
								background: radial-gradient(circle at 1.5em, transparent calc(1.5em - 0.125em), var(--button-bg) 0, var(--button-bg) 100%);
								border-radius: 999px;

								/* Initial state of icon fills and button background */
								--button-bg: transparent;
								transition: opacity 3s 1s,
									--button-bg var(--anim-duration-bg-out) var(--delay-icon-out-bg);

								> svg {
									height: 3em;
									width: auto;
									aspect-ratio: 1 / 1;
									border-radius: inherit;
									box-sizing: border-box;
		
									/* Transitions for HOVER-OUT */
									--icon-path-one-fill: var(--primary-colour);
									--icon-path-two-fill: transparent;
									
									--icon-paths-fill-transition: 
										--icon-path-one-fill var(--anim-duration-icon-out) var(--delay-icon-out-paths), 
										--icon-path-two-fill var(--anim-duration-icon-out) var(--delay-icon-out-paths);
								}
							
								> span {
									flex: 1;
									display: block;
									color: transparent;
									font-weight: 600;
									font-size: 0;
									opacity: 0;
									line-height: 1;
									padding: 1.5ch 0;
									padding-right: 3ch;
									translate: 1ch;
									background: var(--background);
									background-clip: text;
    
									/* Transitions for HOVER-OUT */
									transition: 
									  font-size var(--anim-duration-text-hide) var(--delay-text-hide-font), 
									  opacity var(--anim-duration-text-opacity-hide) var(--delay-text-hide-opacity),
											color var(--anim-duration-bg-out) var(--delay-icon-out-bg);
								}
								
								&:hover {
									cursor: pointer;
									
									/* Hover state of icon fills and button background */
									--button-bg: var(--secondary-colour);
									transition: --button-bg var(--anim-duration-bg-in) var(--delay-icon-in-bg);
									
									> svg {
										/* Transitions for HOVER-IN */
										--icon-path-one-fill: transparent;
										--icon-path-two-fill: var(--secondary-colour);

										--icon-paths-fill-transition: 
											fill var(--anim-duration-icon-in) var(--delay-icon-in-paths);
									}
    
									> span {
									  translate: 1ch 0;
									  font-size: unset;
									  opacity: 1;
									  
									  /* Transitions for HOVER-IN */
									  transition: 
										font-size var(--anim-duration-text-show) var(--delay-text-show-font), 
										opacity var(--anim-duration-text-opacity-show) var(--delay-text-show-opacity),
										color var(--anim-duration-icon-in) var(--delay-icon-in-bg);
									}
								}
							}
						}
					}
	
					> figure {
						display: flex;
						flex-direction: column;
						justify-content: flex-end;
						gap: 1rem;
						margin: 0;
						margin-left: 4rem;
						margin-right: 2rem;
						height: 100%;
						width: min(50vw, calc(100% - 6rem)); /* margin-left + right */
						container: ads-container / size;
	
						> figcaption {
							white-space: nowrap;
							color: rgb(from var(--shades-white) r g b / var(--opacity-high));
							font-family: 'Poppins', 'Calibri', sans-serif;
							font-weight: 200;
							font-size: 1.25rem;
							height: 2rem;
							align-content: center;
							transition: opacity 3s;
						}
	
						> div {
							display: flex;
							flex-flow: row;
							width: fit-content;
							max-width: 100%;
							min-height: 0;
							border: 0.125rem solid rgb(from var(--shades-darker) r g b / var(--opacity-low));
							padding: 1rem;
							gap: 1rem;
							animation: slide-in-left 0.5s 1s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
							transition: 0.25s, opacity 3s 1s;
	
							> picture {
								height: 250px;
								transition: filter 0.25s;

								> * {
									cursor: pointer;
									height: 100%;
									width: auto;
									aspect-ratio: 1 / 1;
									object-fit: contain;

									&.adsbygoogle:not([data-ad-status="filled"]) {
										display: none;

										& + img {
											display: block;
										}
									}

									& + img {
										display: none;
									}
								}
							}
	
							&:hover {
								border-color: rgb(from var(--shades-lighter) r g b / var(--opacity-low));
	
								&:has(> picture:hover) {
									border-color: rgb(from var(--shades-lighter) r g b / var(--opacity-medium));
								}
								
								picture:not(:hover) {
									filter: grayscale(1);
								}
							}
						}
					}
				}

				> #editorSide {
					container-type: inline-size;
					flex: none;
					max-width: 100%;

					& {
						--gutter-width: 0.5;
						--editor-width: 5;
						--total-width: (var(--editor-width) + var(--gutter-width) + var(--editor-width));
						--vertical-padding: (2 * var(--padding));
						--horizontal-padding: (2 * var(--padding));
						--code-editor-height: (100cqh);
						--code-editor-width: (100cqw);
						--content-height: (var(--code-editor-height) - var(--vertical-padding));
						--total-editor-width: ((var(--total-width) / 7) * var(--content-height));
						--single-editor-width: ((var(--editor-width) / 7) * var(--content-height));
						--settings-panel-width: (58.441558ch * 1.232);

					}

					#nestBtn {
						/* Container styles - positioning and animation */
						cursor: pointer;
						font-size: 0.75rem;
						position: absolute;
						top: 0;
						right: 0;
						translate: -2rem calc(96dvh - 6rem - 100%);
						z-index: 10;
						background: none;
						border: none;
						border-radius: 50%;
						padding: 0;
						--nestBtn-shadow-direction: 1;
						animation: bounce-in-top 1.5s 0.5s both;
						transition: opacity 1s, font-size 1s, translate 1s, --nestBtn-shadow-direction 1s;

						&:disabled {
							cursor: not-allowed;
							filter: brightness(0.5);
							color: black;

							> div:hover { scale: unset; }
						}
					
						> div {
							/* Main button face styles */
							border-radius: inherit;
							padding: 1.5em;
							aspect-ratio: 1 / 1;
							font-family: 'Poppins', 'Calibri', sans-serif;
							font-weight: 500; 
							text-align: center;
							align-content: center;
							transform-origin: bottom right;
							transition: scale 0.5s, background-color 1s;
							
							/* Visuals */
							background-color: var(--pri-colour-lighter);
							box-shadow: inset 0 0 1em 0 var(--shades-black);
					
							&:hover {
								scale: 1.333;
								background-color: var(--shades-white);
							}

							&::before { content: 'Nest!'; }
						}
						
						> span {
							/* Animated background layers */
							position: absolute;
							inset: 1em;
							opacity: 0;
							z-index: -1;
							border-radius: inherit;
							transition: inset 0.5s, opacity 2s, background-color 2s;
							animation: shadowRotate 3s infinite both;
							/* --nestBtn-shadow-direction: -1; */
							
							/* Show spans on hover of the main div */
							:is(#nestBtn:not(:disabled):has(> div:hover) > &) {
								inset: 0.5em;
								opacity: 1;
							}
					
							/* Individual layer colors and animation delays */
							&:nth-of-type(1) {
								background-color: rgb(from var(--pri-colour-medium) r g b / var(--opacity-medium));
								animation-delay: 0s;
							}
							
							&:nth-of-type(2) {
								background-color: rgb(from var(--sec-colour-medium) r g b / var(--opacity-medium));
								animation-delay: -1s;
							}
							
							&:nth-of-type(3) {
								background-color: rgb(from color-mix(in srgb, var(--pri-colour-medium), var(--sec-colour-medium)) r g b / var(--opacity-medium));
								animation-delay: -2s;
							}
						}
					
						/* Pause animations when hidden or main content is not hovered */
						:is(:is(:is(body.hidden, #siteWrapper > main:not(:hover)) &), &.hidden) > span {
							animation-play-state: paused;
						}
					}
 
					> #codeEditor {
						flex: none;
						width: auto;
						height: 100%;
						display: flex;
						justify-content: center;
						width: calc((var(--code-editor-height) - var(--vertical-padding)) * (var(--editor-width) / 7));

						/* moveLeft Animation Variables */
						& {
							--screen-width: (100lvw);
							--editor-canvas-width: (100cqw);
							--code-editor-height: (100cqh);
							--code-editor-width: (100%);
							--content-height: (var(--code-editor-height) - var(--vertical-padding));
							--combined-editor-width: ((var(--total-width) / 7) * var(--content-height));
							--difference-of-both-full-widths: (var(--code-editor-width) - var(--combined-editor-width));
							--align-left: (0% - (var(--difference-of-both-full-widths) / 2));
							--editor-canvas-inner-width: calc(var(--editor-canvas-width) - var(--horizontal-padding));
						}

						.editorWrapper:not(.shadowEditorWrapper) {
							width: calc((var(--code-editor-height) - var(--vertical-padding)) * (var(--editor-width) / 7));
							margin: 0 auto;
							
							&#inputEditorWrapper {
								border-radius: 0 3rem 3rem 0;
								transition: opacity 1s, border-color 1s, background-color 1s;
								
								> #shadowEditorsWrapper {
									height: calc(100% + (var(--padding) * 2));
									translate: 0 calc(-100% + var(--padding));

									> .shadowEditorWrapper {
										position: absolute;
										overflow: hidden;
										height: 100%;
										translate: 1px;
									}

									&, * {
										pointer-events: none;
									}
								}
							}
						}
							
						.editorGroup {
							transform-origin: left;
							display: flex;
							flex-direction: column;
							height: 100%;
							width: auto;
							aspect-ratio: var(--editor-width) / 7;

                            &:has(button:active) {
                                --onClickValue1: 0.75;
                                --opacity-medium: var(--onClickValue2, unset);
                                animation: onClick 1s;
                            }

                            &:has(#inputEditor.drag-hover) {
                                --opacity-medium: 0.75;
                            }
						}

						.editorTab {
							--background-colour: rgb(from var(--shades-black) r g b / var(--opacity-low));
							--window-text-colour: rgb(from var(--shades-darker) r g b / var(--opacity-medium));
							line-height: 100%;
							color: rgb(from var(--shades-medium) r g b / 50%);
							font-family: "Fira Code", monospace;
							border: 0.125rem solid var(--window-text-colour);
							border-radius: 1rem 1rem 0 0;
							border-bottom: none;
							background-color: var(--background-colour);
							flex: 0;
							width: 100%;
							display: flex;
							justify-content: space-between;
							padding: 0.75rem;
							
							
							> .fileName {
								font-size: 1rem;
								align-content: center;

								&[cursor]::after {
									font-size: 0.75em;
									content: attr(cursor);
									color: var(--shades-m-darker);
								}
							}
						
							> .tabButtons {
								display: flex;
								gap: 1em;
						
								> button {
									font-size: inherit;
									height: 2rem;
									width: 2rem;
									padding: 0;
									border: none;
									border-radius: 50%;
									background-color: transparent;
									background-position: center;
									background-size: contain;
									background-repeat: no-repeat;
									/* I could've just editing the .svg files to make them gray, but this is the lazy approach */
									filter: invert(0.4431);
									opacity: var(--opacity-medium);
									cursor: pointer;
									transition: 0.1s;

									&.tabCopyAll { background-image: url('../assets/images/icon-copy.svg') }
									&.tabOpenRaw { background-image: url('../assets/images/icon-open-external.svg') }
									&.tabInsertCSS { background-image: url('../assets/images/icon-add-file.svg') }
									&.tabDeleteAll { background-image: url('../assets/images/icon-erase.svg') }

									&:hover {
										filter: invert(0.8832);
									}
								}
							}
						}

						.editor {
							flex: 1;
						}
					}
				}
			}

			&:not(.nesting) {
				> #mainContent {
					gap: var(--padding);
					
					> #editorSide {
						animation: moveRight 2s cubic-bezier(1, 0, 0.5, 1) both;

						> #codeEditor .editorWrapper {
							transition: 1s 0.5s;
							border-left: calc(1rem / 16) solid rgb(from var(--shades-darker) r g b / var(--opacity-medium));

							&#inputEditorWrapper {
								display: block;
								padding: var(--padding);
								padding-left: 0;
								border-color: rgb(from var(--shades-darker) r g b / var(--opacity-low));
								background-color: rgb(from var(--shades-white) r g b / 3%);

								&, > .editorGroup {
									max-width: 100%;
								}
							}

							&#outputEditorWrapper {
								width: 0;
								opacity: 0;
								display: none;
							}
						}
					}
				}
			}

			&.nesting {
				height: 100dvh;
				transition: height 1s;

				& + article,
				& + article section {
					top: 100dvh;
					height: 0;
					gap: 0;
					opacity: 0;
					transition: gap 1s 1s, height 1s 1s, opacity 1s, top 1s;
					pointer-events: none; 
					
					&article { top: 0dvh; }
				}

				> #mainSettings {
					/* A manually calculated minimum width based on it's children elements, but due to `contain` use, getting in dynamically isn't possible. */
					min-width: calc((58.441558ch * 1.232));
					margin-right: var(--padding);
				}

				> #mainContent {

					> #textSide {
						width: 0%;
						opacity: 0;
						padding: 0;
					}
					
					> #editorSide {
						width: 100%;
						align-content: center;
						padding: var(--padding);

						> #nestBtn {
							opacity: 0.75;
							font-size: 0.75rem;
							translate: 0% 0%;
							--nestBtn-shadow-direction: -1;

							> div {
								transform-origin: top right;

								&::before { content: 'Home'; }
							}
						}
 
						> #codeEditor {
							align-items: center;
							margin-left: auto;
							width: calc(100vw - (5 * var(--padding)) - (58.441558ch * 1.232));
							max-width: 100%;
							max-height: 100%;
							aspect-ratio: var(--total-width) / 7;
							animation: moveLeft 2s cubic-bezier(1, 0, 0.5, 1) both;
							
							#editorGap {
								height: 100%;
								aspect-ratio: var(--gutter-width) / 6.625;
							}
							
							.editorWrapper#inputEditorWrapper > #shadowEditorsWrapper > .shadowEditorWrapper {
								translate: 0 !important;
								opacity: 0 !important;
								transition: 2s;
							}
						}
					}
				}
			}
		}

		> article {
			position: relative;
			top: 0;
			font-size: 1rem;
			display: flex;
			flex-direction: column;
			gap: min(50dvh, 800px);

			> section {
				contain: size;
				position: relative;
				height: min(100dvh, 1600px);
				
				&#reducingBoilerplateCode {
					> a {
						margin: 0;
						position: absolute;
						top: 0.75em;
						right: 0;
						color: var(--shades-white);
						text-decoration: none;
						text-transform: uppercase;
						line-height: 100%;
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 500;
						font-size: 2em;
						display: flex;
						align-items: center;
						gap: 1ch;

						&::after {
							position: relative;
							content: '';
							height: 0.125em;
							width: 6em;
							background: var(--shades-white);
						}
					}

					> #repeatingText {
						margin: 0;
						position: absolute;
						top: 8em;
						left: 4em;
						cursor: text;
						color: var(--shades-white);
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 300;
						font-size: 2em;
						width: 52ch;
						
						.repeat {
							pointer-events: none;
							mask-image: linear-gradient(#0000, #000F 75%);
							position: relative;
							padding: 3lh 0 0.04lh;

							&::before {
								content: attr(data-text) "\A" attr(data-text) "\A" attr(data-text) "\A" attr(data-text);
								inset: 0;
								z-index: -1;
								position: absolute;
								color: #FFFFFF80;
								animation: repeatText 2s linear infinite;
								animation-composition: add;
							}

							:is(:is(body.hidden, #siteWrapper:not(:hover)) &, &.hidden)::before {
								animation-play-state: paused;
							}
						}
					}

					> #parallaxText {
						position: absolute;
						bottom: calc(4em / 3);
						right: calc(4em / 3);
						color: var(--shades-white);
						text-transform: uppercase;
						letter-spacing: calc(1em / 6);
						font-family: "Orelo Semi Expanded", sans-serif;
						font-size: 6em;
						height: 3lh;
						width: fit-content;
						display: flex;
						flex-direction: column;
						
						> span {
							cursor: text;
							height: 1lh;
							overflow: hidden;
							line-height: 100%;
							text-shadow: 0 1lh;
							
							> p {
								margin: 0;
								display: inline-block;
								vertical-align: middle;
								translate: 0 -1lh;
							}

							@supports (animation-range: normal) {
								animation: swapText linear 1ms;
								animation-timeline: view();
						
								&:nth-child(1) {
									animation-range-start: cover -0.5lh;
									animation-range-end: contain calc(min(100dvh, 1600px) + -0.5lh);
								}
						
								&:nth-child(2) {
									animation-range-start: cover 0lh;
									animation-range-end: contain calc(min(100dvh, 1600px) + 0lh);
								}
						
								&:nth-child(3) {
									animation-range-start: cover 0.5lh;
									animation-range-end: contain calc(min(100dvh, 1600px) + 0.5lh);
								}
							}
						
							&:nth-child(1) {
								margin-left: 0.5ch;
								text-align: left;
							}
					
							&:nth-child(2) {
								text-align: center;
							}
					
							&:nth-child(3) {
								margin-right: 0.5ch;
								text-align: right;
							}
						}
					}
				}
			
				&#easierMaintenance {
					> #mergingText {
						position: absolute;
						top: calc(4em / 5);
						left: 50%;
						translate: -50%;
						color: var(--shades-white);
						text-align: center;
						text-transform: capitalize;
						letter-spacing: 0.25ch;
						font-family: "Orelo Semi Expanded", sans-serif;
						font-size: 5em;
						display: flex;
						flex-direction: column;
						
						> span {
							cursor: text;
							height: 1lh;
							line-height: 100%;
							overflow: hidden;
							position: relative;

							@supports (animation-range: normal) {
								padding-top: 1lh;

								&:first-child {
									text-shadow: 0 0lh;
									animation: showText linear forwards 1ms;
									animation-timeline: view();
									animation-range-start: cover calc(min(50dvh, 800px) - 1lh);
									animation-range-end: cover calc(min(100dvh, 1600px) - 3.15lh);
								}

								&:last-child {
									text-shadow: 0 -2lh;
									animation: showText linear forwards 1ms;
									animation-timeline: view();
									animation-range-start: cover calc(min(50dvh, 800px) - 1lh);
									animation-range-end: cover calc(min(100dvh, 1600px) - 3.15lh);
								}
							}
						}
					}

					> #changingText {
						position: absolute;
						right: 5vw;
						bottom: 6em;
						color: var(--shades-white);
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 300;
						font-size: 2em;
						width: 56ch;
						text-align: right;

						@supports (animation-range: normal) {
							animation: slideDown linear both 1ms;
							animation-timeline: view();
							animation-range-start: cover;
							animation-range-end: contain 5lh;
						}

						s {
							text-decoration: none;
							font-size: 0.75em;
							color: var(--red-colour-medium); /* oklch(0.75 0.13 15) */
							position: relative;
							display: inline-flex;
							clip-path: inset(0);
							
							&:nth-child(1) { --animation-delay: -1s }
							&:nth-child(3) { --animation-delay: 0s }
							&:nth-child(5) { --animation-delay: -1.5s }
							
							&::before {
								position: absolute;
								content: '';
								width: 100%;
								height: 0.1em;
								background: color-mix(in oklch, currentColor, var(--shades-white) 25%);
								top: 50%;
								animation: strikethrough 2.5s infinite var(--animation-delay);
								animation-timing-function: linear(0 0%, 0 1.8%, 0.01 3.6%, 0.03 6.35%, 0.07 9.1%, 0.13 11.4%, 0.19 13.4%, 0.27 15%, 0.34 16.1%, 0.54 18.35%, 0.66 20.6%, 0.72 22.4%, 0.77 24.6%, 0.81 27.3%, 0.85 30.4%, 0.88 35.1%, 0.92 40.6%, 0.94 47.2%, 0.96 55%, 0.98 64%, 0.99 74.4%, 1 86.4%, 1 100%);
							}
						
							+ b {
								text-decoration: none;
								font-weight: bold;
								color: oklch(from var(--red-colour-medium) l c calc(h + 135)); /* oklch(0.75 0.13 150) */
							}
                                
                            :is(:is(body.hidden, #siteWrapper:not(:hover)) &, &.hidden)::before {
                                animation-play-state: paused;
                            }
						}
					}
				}
			
				&#improvedCodeReadability {
					> #backgroundText {
						margin: 0;
						color: var(--shades-white);
						contain: layout;
						pointer-events: none;
						font-size: 20em;
						line-height: 100%;
						font-family: "Orelo Semi Condensed", sans-serif;
						text-transform: capitalize;
						letter-spacing: 0.0025em;
						display: flex;
						flex-direction: column;
						position: relative;
						z-index: 1;
						
						span {
							padding: 0 calc(1em / 10);
							width: 100%;
							color: rgb(from var(--shades-white) r g b / var(--opacity-low));
							position: relative;
							
							&:first-child, &:last-child {
								text-align: right;

								&:last-child { color: rgb(from var(--shades-white) r g b / var(--opacity-high)) }
							}

							@supports (animation-range: normal) {
								animation: slideIn ease-out forwards 1ms;
								animation-timeline: view();
								animation-range-start: cover -0.5lh;
								animation-range-end: cover calc(2lh + 2.5lh);
						
								&:first-child {
									animation-range-start: cover 0lh;
									animation-range-end: cover calc(2.5lh + 2.5lh);
								}
								
								&:last-child {
									animation-range-start: cover -1.5lh;
									animation-range-end: cover calc(1.5lh + 2.5lh);
								}
							}
						}
					}

					> #visibleText {
						position: absolute;
						z-index: 1;
						right: 7.5vw; 
						bottom: 8em;
						color: var(--shades-white);
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 300;
						font-size: 2em;
						line-height: 1.5em;
						width: 50ch;

						@supports (animation-range: normal) {
							animation: boostUp linear forwards 1ms, slideUp linear forwards 1ms;
							animation-timeline: view(), view();
							animation-range-start: cover, contain 3lh;
							animation-range-end: contain 3lh, cover;
						}

						@supports not (animation-range: normal) {
							translate: -3lh;
						}
						
						b {
							font-size: 1.25em;
							/* line-height: inherit; */
							transition: color 0.5s;
					
							&:hover {
								/* line-height: inherit; */
								color: var(--pri-colour-lightest);
							}
					
							> span {
								transition: 0.125s;
					
								&:hover {
									color: white;
								}
							}
						}
					}
				}
			
				&#groupingStylesTogether {
					align-content: center;

					> #groupedText {
						position: absolute;
						bottom: 25dvh;
						left: 10vw;
						color: var(--shades-white);
						margin: 0;
						letter-spacing: 0.25rem;
						font-family: "Orelo Semi Expanded", sans-serif;
						font-size: 2em;
						padding: 1.5em 2em;
						display: inline-block;
						text-align: left;
						border: 0.125em dashed rgb(from var(--shades-white) r g b / var(--opacity-low));
						background: rgb(from var(--pri-colour-darkest) r g b / var(--opacity-high));

						&::before,
						&::after {
							border: inherit;
							padding: inherit;
							background: inherit;
							pointer-events: none;
							position: absolute;
							content: attr(data-text);
							inset: -0.25rem;
							animation: 10s linear both infinite 5s;
						}
						
						&::before {
							z-index: -1;
							animation-name: changeCard, changeCardBefore;
						}
						
						&::after {
							z-index: 1;
							animation-name: changeCard, changeCardAfter;
						}

						:is(body.hidden &) {
							&::before,
							&::after {
								animation-play-state: paused;
							}
						}
					}

					> #miniEditor {
						position: relative;
						margin-left: auto;
						margin-right: 7.5vw;
						display: flex;
						font-family: 'Fira Code', monospace;
						font-size: 2em;
						line-height: 1em;
						gap: 3ch;
						width: fit-content;
						color: var(--shades-white);
						
						> #lineNumbers {
							width: 2ch;
							opacity: 0.25;
							font-family: inherit;
							text-align: right;
						}
					
						> pre {
							opacity: 0.75;
							font-family: inherit;
							letter-spacing: 0.2em;
							margin: 0;
							--maxLines: 20;
							--activeLine: 1;
							--intensityPos: 100%;
							
							> div {
								padding-right: 5ch;
								
								&:first-child {
									position: relative;
					
									&::before {
										position: absolute;
										content: '';
										top: 0;
										right: 0;
										height: 100%;
										width: calc(100% + 5ch);
										background: linear-gradient(to right, transparent, rgb(from var(--pri-colour-m-darker) r g b / var(--opacity-medium)) calc(var(--intensityPos) - 20%), rgb(from var(--pri-colour-darker) r g b / var(--opacity-medium)) var(--intensityPos), rgb(from var(--pri-colour-m-darker) r g b / var(--opacity-medium)) calc(var(--intensityPos) + 20%), transparent);
										z-index: -1;
										translate: 0 calc((clamp(1, var(--activeLine), var(--maxLines)) - 1) * 1lh);
										transition: 0.5s ease;
									}
								}
							}
						}
					}
				}
			
				&#mechanicsOfNesting {
					contain: size layout;
					display: flex;

					&:has(.hover-animation) {
						&:has(> :not(#backToStart):hover) {
							cursor: none;
			
							> #nyssCursor {
								scale: 0.25;
								animation-duration: 1.5s;
							}
						}
			
						> #nyssCursor {
							opacity: 1;
                            animation: rotate 12.5s linear infinite;
						}
					}

					> #nyssCursor {
						opacity: 0;
						pointer-events: none;
						position: absolute;
						z-index: 999;
						background-color: rgb(from var(--pri-colour-lightest) r g b / var(--opacity-low));
						border-radius: 50%;
						aspect-ratio: 1 / 1;
						font-size: 10em;
						padding: 0.0625em;
						height: auto;
						width: 1em;
						translate: calc(50vw - 50%) calc(50vh - 50%);
						transition: opacity 1s 0.1s, scale 0.5s;

						:is(:has(.hover-animation):has(> &):hover &) { will-change: transform; }

						:is(:is(body.hidden, #siteWrapper:not(:hover)) &), &.hidden {
							animation-play-state: paused;
						}
					}

					> #splittingText {
						position: absolute;
						top: 4lh;
						right: 8ch;
						color: var(--shades-white);
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 300;
						font-size: 1.75rem;
						height: 4lh;
						width: 60ch;
						text-align: justify;
						text-align-last: left;
						column-count: 2;
						gap: 6ch;
						word-spacing: 0.3ch;
						color: transparent;
						@supports (animation-range: normal) {
							animation: unblur ease-out both 1ms;
							animation-timeline: view();
							animation-range: cover contain calc(min(50dvh, 800px));
						}
						
						&::before,
						&::after {
							color: white;
							content: attr(data-text);
							position: absolute;
							inset: 0;
							column-count: inherit;
							gap: inherit;
							animation: widenGap 3s ease-in-out infinite alternate backwards;
						}
						
						&::before {
							clip-path: inset(0 50% 0 0);
							transform-origin: left;
						}
						
						&::after {
							clip-path: inset(0 0 0 50%);
							transform-origin: right;
						}

                        :is(:is(body.hidden, #siteWrapper:not(:hover)) &), &.hidden {
							&::before,
							&::after {
								animation-play-state: paused;
							}
						}
					}

					> #strechingText {
						position: absolute;
						top: calc(4em / 3);
						left: calc(8em / 3);
						color: var(--shades-white);
						line-height: 200%;
						font-family: 'Orelo Semi Condensed';
						font-weight: 600;
						font-size: 3em;
						scale: 1;
						@supports (animation-range: normal) {
							animation: moveDown linear both 1ms;
							animation-timeline: view();
							animation-range-start: cover -2lh;
							animation-range-end: cover 2lh;
						}
					
						> span {
							display: inline-block;
							transition: 1s;
							
							&:hover {
								scale: 1 2;
								transition: 0s;
							}
						}
					}

					> #nestingText { /* Click anywhere text fades up and and behind the "Nest your CSS" text */
						position: absolute;
						bottom: calc(8em / 5);
						right: calc(24em / 5);
						color: var(--shades-white);
						font-size: 5em;
						contain: layout;

						> * {
							margin: 0;
							white-space: nowrap;
						}

						> h1 {
							font-size: 1em;
							font-weight: 900;
							font-family: 'Poppins', 'Calibri', sans-serif;
							@supports (animation-range: normal) {
								animation: moveDown linear both 1ms;
								animation-timeline: view();
								animation-range-start: cover -2lh;
								animation-range-end: cover 2lh;
							}
							transition: scale 1s, text-shadow 1s;
							
							&:hover {
								scale: 1.1;
								text-shadow: 0 -0.1lh calc(1em / 5) var(--shades-black);
							}
						}

						> p {
							position: absolute;
							z-index: -1;
							top: 0;
							left: 0;
							line-height: 1em;
							font-size: 1.125em;
							font-weight: 600;
							letter-spacing: -0.05em;
							font-family: 'Orelo Expanded';
							color: rgb(from var(--shades-white) r g b / var(--opacity-medium));
							@supports (animation-range: normal) {
								animation: fadeUp linear both 1ms;
								animation-timeline: view();
								animation-range-start: cover;
								animation-range-end: cover calc(1lh + 1.98em);
							}
							@supports not (animation-range: normal) {
								translate: -0.96ch -0.31em;
								opacity: 1;
							}
						}

						a {
							color: unset;
							text-decoration: unset;
						}
					}

					> button#nycssLogoGroup {
						/* Removing Default Button Styling */
						background: none;
						border: none;
						margin: 0;
						padding: 0;
						align-items: normal;
						cursor: pointer;
						font-size: unset;

						&#nycssLogoGroup {
							align-self: flex-end;
							contain: layout;
							display: inline-flex;
							flex-direction: column;
							margin-left: 8vw;
							margin-bottom: 8vw;
							position: relative;
							z-index: 1;

							> * { pointer-events: none; }
					
							> img {
								height: 16em;
							}
					
							#nycssNest {
								color: transparent;
								filter: drop-shadow(0 -0.5em) drop-shadow(0.7em 0.3em) drop-shadow(5.4em 1em) drop-shadow(7.1em 1.1em) drop-shadow(1.6em 0.4em) drop-shadow(4.3em 0.9em);
								clip-path: circle(47.2%);
							}
					
							#nycssBadge {
								/* Badge Scroll Positions */
								--main-x: 80vw;
								--main-y: calc(max(-600dvh, -9600px) - 150%);
								--reducingBoilerplateCode-y: calc(max(-600dvh, -9600px) + 0%);
								--easierMaintenance-y: calc(max(-450dvh, -7200px) + 50%);
								--improvedCodeReadability-y: calc(max(-300dvh, -4800px) - 50%);
								--groupingStylesTogether-y: calc(max(-150dvh, -2400px) + 66%);
								--mechanicsOfNesting-y: 50%;

								/* backface-visibility: hidden; */
								pointer-events: none;
								filter: drop-shadow(0 var(--shadow-distance) 0 var(--shadow-color)) drop-shadow(0 calc(-1 * var(--shadow-distance)) 0 var(--shadow-color));
								--shadow-color: #1474B833; /* Taken directly from the CSS Logo */
								--shadow-distance: 0;
								transition: 1s;
					
								&.main-animation {
									animation: fall linear 1ms;
									animation-timeline: scroll(nearest);
								}
					
								&.idle-animation {
									animation: fall linear 1ms, idle 2.5s infinite alternate;
									animation-timeline: scroll(nearest), auto; /* convert to view() if possible */
									animation-composition: add;

                                    :is(:is(body.hidden, #siteWrapper:not(:hover)) &), &.hidden {
                                        animation-play-state: paused;
                                    }
								}
					
								&.hover-animation {
									animation: hover 2s infinite alternate;
									--shadow-color: #1474B833; /* Taken directly from the CSS Logo */
									--shadow-distance: 1.5em;

                                    :is(:is(body.hidden, #siteWrapper:not(:hover)) &), &.hidden {
                                        animation-play-state: paused;
                                    }
								}
							}
					
							&:has(.hover-animation) {
								clip-path: inset(19.3% 1.3% 1.3% 7.3%);
					
								&:hover #nycssBadge.hover-animation {
									--shadow-color: #26A2D933; /* Taken directly from the CSS Logo */
									--shadow-distance: 2em;
								}
							}
						}
					}

					> #backToStart {
						position: absolute;
						top: 0;
						left: 0;
						height: 100%;
						width: 100%;

						&:has(~ button > .hover-animation) {
							display: block;
						}
					}
				}
			}

			.optimize {
				content-visibility: auto;
			}
		}
	}
}

/* 1235 x 1125 - Breaking point between mobile & desktop */
@media (max-aspect-ratio: 1.097 / 1) {
	body > #siteWrapper > main {
		> #mainContent {
			border-radius: 1rem;
		}

		> #mainSettings,
		> #mainContent :is(#textSide, #shadowEditorsWrapper) {
			display: none;
		}

		&:not(.nesting) > #mainContent { && {
			justify-content: center;

			
			#codeEditor {
				margin: 0 auto;
				animation: fadeIn 2s linear both;

				#inputEditorWrapper {
					border: none;
					border-radius: 1rem;
					background: none;
					padding: 0;
				}
			}
		}}

		&.nesting {
			> #mainContent {
				min-width: 100%;
				transition: unset;
				
				> #editorSide {
					/* 
					* Remove the slide in animation, just make it fade out & fade in
					* And make the editors stack on top of each other, aspect-ratio
					* can be ignored - just fill the screen
					*/

					> #codeEditor {
						height: 100%;
						width: 100%;
						animation: none;
						flex-direction: column;
	
						#editorGap {
							height: var(--padding);
							aspect-ratio: auto;
							flex: none;
						}
	
						.editorWrapper {
							flex: 1;
						}

						.editorGroup {
							aspect-ratio: auto;
						}

						.editor {
							height: 100%;
							width: 100%;
							aspect-ratio: auto;
						}
					}
				}
			}
		}
	}
	
	body > #siteWrapper > article {
		font-size: clamp(1.1px, 1.15dvw, 22.5px);

		> section, > a > section {
			contain: size;
			position: relative;
			height: min(100dvh, 1600px);

			&#reducingBoilerplateCode {
				> #repeatingText {
					top: 50%;
					translate: 0 calc(-50% - 7.5em);
				}

				> #parallaxText {
					bottom: 50%;
					translate: 0 calc(-50% + 6em);
				}
			}
		
			&#easierMaintenance {
				> #mergingText {
					top: calc(4em / 3);
				}

				> #changingText {
					bottom: 50%;
					translate: 0 calc(-50% + 5em);
				}
			}
		
			&#improvedCodeReadability {
				> #backgroundText {
					top: 50%;
					translate: 0 -50%;
				}

				> #visibleText {
					top: 50%;
					translate: 0 -25%;
				}
			}
		
			&#groupingStylesTogether {
				> #groupedText {
					bottom: 10%;
				}
			}
		
			&#mechanicsOfNesting {
				> #splittingText {
					top: 50%;
					translate: 0 calc(-50% - 12.5em);
				}
				
				> #strechingText {
					top: 50%;
					translate: 0 calc(-50% - 12.5em);
					animation: none;
				}

				> #nestingText {
					bottom: calc(32em / 5);
				}
			}
		}
	}
}