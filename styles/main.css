/* @starting-style {
	#siteWrapper *:not(:has(menu), menu, menu *) {
		display: none !important;
	}
} */

/* The actual main CSS file for this website */

:root {
    font-size: clamp(0px, 1.5dvh, 24px);

	--pri-colour-hue: oklch(none none 235);
	--pri-colour-darkest: oklch(from var(--pri-colour-hue) 20% 0.0424 h); /* #051823 */
    --pri-colour-em-darker: oklch(from var(--pri-colour-hue) 25% 0.0424 h); /* #092533 */
    --pri-colour-m-darker: oklch(from var(--pri-colour-hue) 40% 0.0679 h); /* #1c4d67 */
    --pri-colour-darker: oklch(from var(--pri-colour-hue) 55% 0.0935 h); /* #307aa0 */
    --pri-colour-medium: oklch(from var(--pri-colour-hue) 75% 0.1278 h); /* #4dbaf3 */
    --pri-colour-lighter: oklch(from var(--pri-colour-hue) 85% 0.0821 h); /* #98d7fc */
    --pri-colour-lightest: oklch(from var(--pri-colour-hue) 90% 0.0522 h); /* #bde4fc */

	--sec-colour-hue: oklch(none none 205);
	--sec-colour-darkest: oklch(from var(--sec-colour-hue) 20% 0.0424 h); /* #001a1d */
    --sec-colour-em-darker: oklch(from var(--sec-colour-hue) 25% 0.0424 h); /* #00272b */
    --sec-colour-m-darker: oklch(from var(--sec-colour-hue) 40% 0.0679 h); /* #015259 */
    --sec-colour-darker: oklch(from var(--sec-colour-hue) 55% 0.0935 h); /* #02818b */
    --sec-colour-medium: oklch(from var(--sec-colour-hue) 75% 0.1278 h); /* #03c4d4 */
    --sec-colour-lighter: oklch(from var(--sec-colour-hue) 85% 0.0821 h); /* #8aDee7 */
    --sec-colour-lightest: oklch(from var(--sec-colour-hue) 90% 0.0522 h); /* #b6e9ee */

	--red-colour-hue: oklch(none none 15);
	--red-colour-darkest: oklch(from var(--red-colour-hue) 20% 0.0424 h); /* #230f11 */
    --red-colour-em-darker: oklch(from var(--red-colour-hue) 25% 0.0424 h); /* #33191b */
    --red-colour-m-darker: oklch(from var(--red-colour-hue) 40% 0.0679 h); /* #67383c */
    --red-colour-darker: oklch(from var(--red-colour-hue) 55% 0.0935 h); /* #a15a60 */
    --red-colour-medium: oklch(from var(--red-colour-hue) 75% 0.1278 h); /* #f48a94 */
    --red-colour-lighter: oklch(from var(--red-colour-hue) 85% 0.0821 h); /* #ffb8bc */
    --red-colour-lightest: oklch(from var(--red-colour-hue) 90% 0.0522 h); /* #ffd1d3 */

	--shades-hue: oklch(none none 360);
	--shades-darkest: oklch(from var(--shades-hue) 20% c h); /* #161616 */
    --shades-em-darker: oklch(from var(--shades-hue) 25% c h); /* #222222 */
    --shades-m-darker: oklch(from var(--shades-hue) 40% c h); /* #484848 */
    --shades-darker: oklch(from var(--shades-hue) 55% c h); /* #717171 */
    --shades-medium: oklch(from var(--shades-hue) 75% c h); /* #aeaeae */
    --shades-lighter: oklch(from var(--shades-hue) 85% c h); /* #cecece */
    --shades-lightest: oklch(from var(--shades-hue) 90% c h); /* #dedede */

    --shades-black: black;
    --shades-white: white;
    
    --opacity-low: 0.25;
    --opacity-medium: 0.50;
    --opacity-high: 0.75;
}

/* Match any & all hex codes */
/* #([0-9a-f]{3}|[0-9a-f]{6}|[0-9a-f]{8})(?=[^0-9a-z]) */
/* #([0-9a-fA-F]{3}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})(?=[^0-9a-zA-Z]) */

* {
	box-sizing: border-box;

	&[hidden] {
		display: none !important;
	}
}

html {
	background-color: var(--shades-black);
	scroll-behavior: smooth;
	
	::-webkit-scrollbar {
		width: 0;
	}
}

body {	
    margin: 0;
    min-height: 100dvh;
	--cursorHorizPosition: 50%;
	background-color: var(--shades-black);
	animation: lightenBackgroundColour linear;
	animation-timeline: scroll(root);

	:has(.nesting) {
		background-color: var(--shades-black);
		transition: background-color ease-in 2s;
	}

	> #siteWrapper {
		margin: 0 auto;
		width: clamp(0px, 100%, 3200px);
		contain: paint;

		> main {
			--padding: 2rem;
			display: flex;
			justify-content: flex-end;
			height: 96dvh;
			width: 100%;
			padding: var(--padding);

			> #mainSettings {
				display: none;
				margin-right: 0;
				flex: 0;
			}

			> #mainContent {
				--background: url("../assets/images/nycss-bg-pattern.png") 0 0.1dvh / 5dvh repeat,
				linear-gradient(to right, rgb(from var(--shades-black) r g b / var(--opacity-medium)), rgb(from var(--pri-colour-em-darker) r g b / var(--opacity-medium))) 0 0 / 100dvw 100dvh,
				linear-gradient(45deg, transparent, rgb(from var(--pri-colour-m-darker) r g b / var(--opacity-medium)) var(--cursorHorizPosition), transparent) 0 0 / 100dvw 100dvh,
				var(--shades-black);
				contain: content;
				display: flex;
				justify-content: space-between;
				min-width: 100%;
				container-type: size;
				flex: 1;
				width: fit-content;
				position: relative;
				background: var(--background);
				border-radius: 3rem;
				transform-origin: center;
				animation: scaleDown linear both;
				animation-timeline: view();
				animation-range-start: contain 100%;
				animation-range-end: cover 100%;
				
				> #textSide {
					width: 100%;
					height: 100%;
					display: flex;
					padding: 2rem 0;
					flex-direction: column;
					justify-content: space-between;
					container-type: inline-size;
					contain: paint;
	
					> header {
						margin: 2rem 2rem 0 4rem;
						font-size: clamp(0.5rem, 16px, 1.125rem);
	
						> hgroup {
							color: rgb(from var(--shades-white) r g b / var(--opacity-high));
							font-family: 'Poppins', 'Calibri', sans-serif;
	
							> * { margin: 0; }
	
							> h3 {
								line-height: 125%;
								font-weight: 200;
								font-size: 3em;
								height: 2lh;
								width: min(100%, 24ch);
								overflow-y: auto;
							}

							> h1 {
								line-height: 125%;
								font-weight: 900;
								font-size: 6em;
								transition: 0.25s;
	
								&:hover {
									color: var(--shades-white);
								}
							}
						}
	
						> menu {
							display: inline-flex;
							--primary-colour: var(--shades-darker);
							--secondary-colour: color-mix(in srgb, var(--shades-lightest), var(--primary-colour) 75%);
							gap: 0.33em;
							margin: 1em 0;
							padding: 0;
	
							/* Sourced from: https://codepen.io/TigerYT/pen/bNdGKQq */

							> button {
								/* --- Animation Duration & Delay Variables --- */
								  
								/* Part 1: Icon changing (on hover) */
								--anim-duration-icon-in: 0.5s;
								--anim-duration-bg-in: 0s;
								--delay-icon-in-paths: 0s;
								--delay-icon-in-bg: calc(var(--delay-icon-in-paths) + var(--anim-duration-icon-in) + 0s);
											
								/* Part 2: Text being shown (on hover) */
								--anim-duration-text-show: 0.5s;
								--anim-duration-text-opacity-show: 0.25s;
								--delay-text-show-font: calc(var(--delay-icon-in-bg) + 0s);
								--delay-text-show-opacity: calc(var(--delay-text-show-font) + var(--anim-duration-text-show) + 0s);
							  
								/* Part 3: Text being hidden (on mouse out) */
								--anim-duration-text-hide: 0.5s;
								--anim-duration-text-opacity-hide: 0.25s;
								--delay-text-hide-opacity: 0s;
								--delay-text-hide-font: 0.5s;
							  
								/* Part 4: Icon changing back (on mouse out) */
								--anim-duration-icon-out: 0.5s;
								--anim-duration-bg-out: 0s;
								--delay-icon-out-paths: calc(var(--delay-text-hide-font) + var(--anim-duration-text-hide) + 0s);
								--delay-icon-out-bg: calc(var(--delay-icon-out-paths) + 0s);

								display: flex;
								font-size: inherit;
								flex-direction: row;
								align-items: center;
								position: relative;
								padding: 0;
								border: none;
								background: radial-gradient(circle at 1.5em, transparent calc(1.5em - 0.125em), var(--button-bg) 0, var(--button-bg) 100%);
								border-radius: 999px;

								/* Initial state of icon fills and button background */
								--button-bg: transparent;
								transition: --button-bg var(--anim-duration-bg-out) var(--delay-icon-out-bg);

								> a {
									position: absolute;
									top: 0;
									left: 0;
									height: 100%;
									width: 100%;
									z-index: 1;
									border-radius: inherit;
								}
								
								> svg {
									height: 3em;
									width: auto;
									aspect-ratio: 1 / 1;
									border-radius: inherit;
									box-sizing: border-box;
		
									/* Transitions for HOVER-OUT */
									--icon-path-one-fill: var(--primary-colour);
									--icon-path-two-fill: transparent;
									
									--icon-paths-fill-transition: 
										--icon-path-one-fill var(--anim-duration-icon-out) var(--delay-icon-out-paths), 
										--icon-path-two-fill var(--anim-duration-icon-out) var(--delay-icon-out-paths);
								}
							
								> span {
									flex: 1;
									display: block;
									color: transparent;
									font-weight: 600;
									font-size: 0;
									opacity: 0;
									line-height: 1;
									padding: 1.5ch 0;
									padding-right: 3ch;
									translate: 1ch;
									background: var(--background);
									background-clip: text;
    
									/* Transitions for HOVER-OUT */
									transition: 
									  font-size var(--anim-duration-text-hide) var(--delay-text-hide-font), 
									  opacity var(--anim-duration-text-opacity-hide) var(--delay-text-hide-opacity),
											color var(--anim-duration-bg-out) var(--delay-icon-out-bg);
								}
								
								&:hover {
									cursor: pointer;
									
									/* Hover state of icon fills and button background */
									--button-bg: var(--secondary-colour);
									transition: --button-bg var(--anim-duration-bg-in) var(--delay-icon-in-bg);
									
									> svg {
										/* Transitions for HOVER-IN */
										--icon-path-one-fill: transparent;
										--icon-path-two-fill: var(--secondary-colour);

										--icon-paths-fill-transition: 
											fill var(--anim-duration-icon-in) var(--delay-icon-in-paths);
									}
    
									> span {
									  translate: 1ch 0;
									  font-size: unset;
									  opacity: 1;
									  
									  /* Transitions for HOVER-IN */
									  transition: 
										font-size var(--anim-duration-text-show) var(--delay-text-show-font), 
										opacity var(--anim-duration-text-opacity-show) var(--delay-text-show-opacity),
										color var(--anim-duration-icon-in) var(--delay-icon-in-bg);
									}
								}
							}
						}
					}
	
					> figure {
						display: flex;
						flex-direction: column;
						justify-content: flex-end;
						gap: 1rem;
						margin: 0;
						margin-left: 4rem;
						margin-right: 2rem;
						height: 100%;
						width: min(50vw, calc(100% - 6rem)); /* margin-left + right */
						container: ads-container / size;
	
						> figcaption {
							color: rgb(from var(--shades-white) r g b / var(--opacity-high));
							font-family: 'Poppins', 'Calibri', sans-serif;
							font-weight: 200;
							font-size: 1.25rem;
							height: 2rem;
							align-content: center;
						}
	
						> div {
							display: none;
							width: fit-content;
							max-width: 100%;
							min-height: 0;
							border: 0.125rem solid rgb(from var(--shades-darker) r g b / var(--opacity-low));
							padding: 1rem;
							gap: 1rem;
							transition: 0.25s;
	
							> picture {
								--column-count: 0;
								--width: calc((100cqw / var(--column-count)) - ((2rem + (1rem * (var(--column-count) - 1))) / var(--column-count)));
								position: relative;
								border: none;
								/* max-height: 100%;
								min-height: calc(var(--width) * 0.820895522);
								max-width: var(--width);
								min-width: var(--width);
								width: var(--width); */
								overflow-x: auto;
								display: none;

								background: red;

								&.leaderboard { width: 728px; height: 90px; }
								&.large-rectangle { width: 336px; height: 280px; }
								&.medium-rectangle { width: 300px; height: 250px; }
								&.mobile-banner { width: 300px; height: 50px; }
								&.wide-skyscraper { width: 160px; height: 600px; }
								&.dbl-mobile-leaderboard { width: 320px; height: 100px; }
								&.half-page { width: 300px; height: 600px; }

								> ins {
									display: inline-block;
									/* height: 100%; */
									max-height: inherit;
									min-height: inherit;
									width: inherit;

									&.adsbygoogle[data-ad-status="unfilled"] {
										display: none !important;
									}
								}
							}

							> * {
								transition: inherit;
								cursor: pointer;
							}
	
							&:hover {
								border-color: rgb(from var(--shades-lighter) r g b / var(--opacity-low));
	
								&:has(> img:hover) {
									border-color: rgb(from var(--shades-lighter) r g b / var(--opacity-medium));
								}
								
								:not(:hover) {
									filter: grayscale(1);
								}
							}
						}
					}
				}

				> #editorSide {
					max-width: 100%;
					/* Editor Config */
					--gutter-width: 0.5;
					--editor-width: 5;
					--total-width: calc(var(--editor-width) + var(--gutter-width) + var(--editor-width));

					> #nestBtn {
						opacity: 1;
						position: absolute;
						aspect-ratio: 1 / 1;
						bottom: 2rem;
						right: 2rem;
						z-index: 10;
						
						cursor: pointer;
						border: none;
						padding: 2em;
						aspect-ratio: 1 / 1;
						border-radius: 50%;
						font-size: 0.75rem;
						font-weight: bold;
						background-image: linear-gradient(135deg, var(--sec-colour-lighter), var(--pri-colour-darker));
						transform-origin: bottom right;
						transition: 0.5s, --nestBtn-shadow-colour-1 0s, --nestBtn-shadow-colour-2 0s, --nestBtn-shadow-colour-3 0s;
						animation: shadowRotate 3s infinite both;
						animation-composition: add;
						box-shadow: inset 0 0 0.5em 0 var(--shades-black);
					
						&:hover {
							/* The undefined '--animationControls' prevents the box-shadow from showing initially. Fixing the error during runtime makes the box-shadow appear **without resetting the animation**. */
							--animationControls: 0 0 transparent;
							transform: scale(1.333);
							background-color: var(--shades-white);
							transition: 0.5s, --nestBtn-shadow-colour-1 2s, --nestBtn-shadow-colour-2 2s, --nestBtn-shadow-colour-3 2s;
							
							/* Using variables so I can transition from transparent to their individual colours */
							--nestBtn-shadow-colour-1: rgb(from var(--pri-colour-medium) r g b / var(--opacity-medium));
							--nestBtn-shadow-colour-2: rgb(from var(--sec-colour-medium) r g b / var(--opacity-medium));
							--nestBtn-shadow-colour-3: rgb(from color-mix(in srgb, var(--pri-colour-medium), var(--sec-colour-medium)) r g b / var(--opacity-medium));
						}
					}
 
					> #codeEditor {
						width: auto;
						height: 100%;
						display: flex;

						.editorWrapper {
							&#inputEditorWrapper > #shadowEditorsWrapper {
								height: calc(100% + (var(--padding) * 2));
								translate: 0 calc(-100% + var(--padding));

								> .shadowEditorWrapper {
									position: absolute;
									overflow: hidden;
									height: 100%;
								}

								&, * {
									pointer-events: none;
								}
							}
						}
							
						.editorGroup {
							transform-origin: left;
							display: flex;
							flex-direction: column;
							height: 100%;
							width: auto;
							aspect-ratio: var(--editor-width) / 7;

                            &:has(button:active) {
                                --onClickValue1: 0.75;
                                --opacity-medium: var(--onClickValue2, unset);
                                animation: onClick 1s;
                            }

                            &:has(#inputEditor.drag-hover) {
                                --opacity-medium: 0.75;
                            }
						}

						.editorTab {
							--background-colour: rgb(from var(--shades-black) r g b / var(--opacity-low));
							--window-text-colour: rgb(from var(--shades-darker) r g b / var(--opacity-medium));
							line-height: 100%;
							color: rgb(from var(--shades-medium) r g b / 50%);
							font-family: "Fira Code", monospace;
							border: 0.25rch solid var(--window-text-colour);
							border-radius: 1rem 1rem 0 0;
							border-bottom: none;
							background-color: var(--background-colour);
							flex: 0;
							width: 100%;
							display: flex;
							justify-content: space-between;
							padding: 0.75rem;
							
							
							> .fileName {
								font-size: 1rem;
								align-content: center;

								&[cursor]::after {
									font-size: 0.75em;
									content: attr(cursor);
									color: var(--shades-m-darker);
								}
							}
						
							> .tabButtons {
								display: flex;
								gap: 1em;
						
								> button {
									font-size: inherit;
									height: 2rem;
									width: 2rem;
									padding: 0;
									border: none;
									border-radius: 50%;
									background-color: transparent;
									background-position: center;
									background-size: contain;
									background-repeat: no-repeat;
									/* I could've just editing the .svg files to make them gray, but this is the lazy approach */
									filter: invert(0.4431);
									opacity: var(--opacity-medium);
									cursor: pointer;
									transition: 0.1s;

									&.tabCopyAll { background-image: url('../assets/images/icon-copy.svg') }
									&.tabOpenRaw { background-image: url('../assets/images/icon-open-external.svg') }
									&.tabInsertCSS { background-image: url('../assets/images/icon-add-file.svg') }
									&.tabDeleteAll { background-image: url('../assets/images/icon-erase.svg') }

									&:hover {
										filter: invert(0.8832);
									}
								}
							}
						}

						.editor {
							flex: 1;
						}
					}
				}
			}

			&:not(.nesting) {
				> #mainContent {
					gap: var(--padding);
					
					> #editorSide > #codeEditor {
						.editorWrapper {
							transition: 1s;
							border-left: calc(1rem / 16) solid rgb(from var(--shades-darker) r g b / var(--opacity-medium));

							&#inputEditorWrapper {
								padding: var(--padding);
								padding-left: 0;
								border-radius: 0 1rem 1rem 0;
								border-color: rgb(from var(--shades-darker) r g b / var(--opacity-low));
								background: rgb(from var(--shades-white) r g b / 3%);

								&, > .editorGroup, .editorTab, .editor {
										max-width: 100%;
								}
							}

							&#outputEditorWrapper {
								width: 0;
								opacity: 0;
								display: none;
							}
						}
					}
				}
			}

			&.nesting {
				height: 100dvh;
				transition: height 1s;

				& + article,
				& + article section {
					height: 0;
					gap: 0;
					opacity: 0;
					transition: gap 1s 1s, height 1s 1s, opacity 1s 0s;
					pointer-events: none; 
				}

				> #mainSettings {
					margin-right: var(--padding);
					height: 100%;
					/* A manually calculated minimum width based on it's children elements, but due to `contain` use, getting in dynamically isn't possible. */
					min-width: calc(58.441558ch * 1.232);
					transition: margin-right 2s;
					display: flex;
					flex-direction: column;
					gap: var(--padding);
					overflow: auto;

					> section {
						border-radius: 3rem;
						--panel-background: color-mix(in srgb, var(--shades-darkest), var(--shades-black) 75%);
						background-color: var(--panel-background);
						padding: var(--padding);
						min-width: 58.441558ch;
						display: flex;
						flex-direction: column;
						gap: var(--padding);
						font-family: 'Poppins', 'Calibri', sans-serif;

						/* &:not(:nth-last-child(1)) { display: none; } */

						> h2 {
							margin: 0;
							font-size: 1.25rem;
							font-weight: normal;
							color: var(--shades-medium);
						}

						> ul {
							list-style: none;
							margin: 0;
							padding: 0;
							display: flex;
							flex-direction: column;
							--component-gap: calc(var(--padding) / 4);
							--component-background: color-mix(in srgb, var(--shades-black), var(--shades-darkest));
							--component-background-selected: linear-gradient(to right, var(--shades-m-darker), var(--shades-em-darker));
							--component-box-shadow-selected: inset 0 calc(1rem / 16) oklch(100% none none / var(--opacity-low));
							--component-text: color-mix(in srgb, var(--shades-darker), var(--shades-medium));
							--component-text-hover: var(--shades-medium);
							gap: var(--component-gap);


							> li {
								display: grid;
								grid-template-columns: repeat(8, 1fr);

								> label {
									cursor: auto;
									grid-column: span 3;
									align-content: center;
									font-size: 1.125rem;
									font-weight: 300;
									color: var(--component-text);

									> p {
										margin: 0;
										font-size: 0.625rem;
										color: var(--shades-m-darker);
									}
								}
	
								> div {
									grid-column: span 5;
									display: flex;
									flex-direction: row;
									justify-content: space-between;
									gap: var(--component-gap);
									color: var(--component-text);
									font-size: 1rem;

									#typefaces {
										flex: 1;
									}

									#fontsizes {
										width: auto;
										margin: 0;
										flex: 0;
									}

									#indentationType {
										flex: 0;
									}

									#indentationSize {
										flex: 0;
										display: flex;
										align-items: center;
										gap: var(--component-gap);
									}

									#coordinates {
										flex: 1;
									}

									#mode {
										flex: 1;
									}

									#auto {
										flex: 1;
									}
									
									#externalCss {
										flex: 1;
										max-width: 100%;
									}

									#samples {
										flex: 1;
									}

									/* Components */

									.dropdown,
									.combobox {
										user-select: none;
										display: inline-flex;
										flex-direction: column;
										width: auto;
										margin: 0;
										text-align: left;
										box-sizing: content-box;
										position: relative;

										> input {
											appearance: none;
											position: absolute;
											margin: 0;
										
											&:checked {
												+ output {
													border-radius: 1rem 1rem 0 0;
												}
										
												~ menu {
													position: absolute;
													z-index: 999;
													top: 100%;
													width: 100%;
													display: flex;
													margin: 0;
													margin-top: 0.25rem;
													padding: 1em;
													gap: 0.5em;
													flex-direction: column;
													background: var(--component-background);
													border-bottom-left-radius: 1rem;
													border-bottom-right-radius: 1rem;
													box-shadow: 0px 10px 10px 2.5px rgb(from var(--shades-black) r g b / 0.5);

													> option {
														overflow: hidden;
														text-overflow: ellipsis;

														&:hover {
															color: var(--component-text-hover);
															cursor: pointer;
														}
												
														&:focus {
															color: var(--component-text-hover);
															outline: none;
														}

														&:disabled {
															color: rgb(from var(--component-text) r g b / 0.5);
															cursor: not-allowed;
			
															&:hover {
																color: inherit;
															}
														}
													}
												}
											}
										}
										
										> output {
											cursor: pointer;
											white-space: nowrap;
											text-overflow: ellipsis;
											overflow: clip;
											background: url("data:image/svg+xml,%3Csvg fill='%23484848' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11.178 19.569a.998.998 0 0 0 1.644 0l9-13A.999.999 0 0 0 21 5H3a1.002 1.002 0 0 0-.822 1.569l9 13z'%3E%3C/path%3E%3C/svg%3E") right 1rem top 50% / 1ch no-repeat, var(--component-background);
											border-radius: 1rem;
											padding: 1rem;
											padding-right: calc(1rem + 2ch);
											
											&:hover {
												color: var(--component-text-hover);
											}
										}
										
										&:has(:focus, :focus-visible, :active) output {
											outline: none;
											box-shadow: 0 0 2em var(--shades-black);
										}
									}

									.number {
										user-select: none;
										position: relative;
										width: fit-content;
										color: var(--component-text);
										border: none;
									
										&:hover {
											color: var(--component-text-hover);
										}

										span {
											cursor: auto;
											display: inline-block;
											background: var(--component-background);
											border-radius: 1rem;
											padding: 1rem;
											padding-right: calc(1rem + 2ch);
									
											&:focus {
												outline: none;
												box-shadow: 0 0 2em var(--shades-black);
											}

											+ div {
												position: absolute;
												width: 1ch;
												top: 50%;
												right: 1rem;
												translate: 0 -50%;
												display: flex;
												flex-direction: column;
												gap: 0.25em;

												> svg {
													cursor: pointer;
												}
											}
										}
									}

									.checkbox {
										user-select: none;
										position: relative;
										display: flex;
										border-radius: 1rem;
										background: var(--component-background);
										
										&::before {
											position: absolute;
											content: '';
											height: 100%;
											left: 0%;
											width: 50%;
											border-radius: inherit;
											background: var(--component-background-selected);
											box-shadow: var(--component-box-shadow-selected);
											z-index: 0;
											transition: 0.25s;
										}

										&:has(:checked)::before {
											left: 50%;
										}

										> input {
											appearance: none;
											position: absolute;
											margin: 0;
										}

										> span {
											position: relative;
											cursor: pointer;
											flex: 1;
											padding: 1rem 2.5ch;
											text-align: center;
											align-content: center;
									
											&:hover {
												color: var(--component-text-hover);
											}
										}
									}

									.radio-group {
										user-select: none;
										display: flex;
										gap: var(--component-gap);

										> label {
											flex: 1;
											cursor: pointer;
											padding: 1rem 1.75ch;
											text-align: center;
											align-content: center;
											border-radius: 1rem;
											--top-colour: var(--shades-m-darker);
											--bottom-colour: var(--shades-em-darker);
											background: linear-gradient(to bottom, var(--top-colour), var(--bottom-colour) 45%, var(--component-background) 55%) 0% 100% / 100% 210% no-repeat, var(--component-background);
											transition: background-position 0.125s ease-out;

											&:has(:disabled) {
												&, &:hover {
													--shades-true-darkest: color-mix(in srgb, var(--shades-black), var(--shades-darkest));
													background: linear-gradient(to bottom, var(--shades-black), var(--shades-true-darkest));
													box-shadow: inset 0 calc(-1rem / 16) var(--shades-darkest);
													color: var(--shades-m-darker);
													cursor: not-allowed;
												}
											}

											&:has(:checked) {
												box-shadow: var(--component-box-shadow-selected);
												background-position: 0% 0%;
											}
									
											&:hover {
												color: var(--component-text-hover);
											}

											> input {
												appearance: none;
												position: absolute;
												margin: 0;
											}
										}

										&.button {
											> label {
												--top-colour: var(--sec-colour-m-darker);
												--bottom-colour: var(--pri-colour-darkest);
											}
										}
									}

									.combobox { 
										> output {
											
											&&:hover > div:empty::before {
												color: var(--shades-darker);
											}

											div {
												cursor: auto;
												overflow: hidden;
												text-overflow: ellipsis;
												
												&:focus {
													outline: none;
													overflow-x: scroll;
													scrollbar-width: none;
													text-overflow: clip;
												}

												&:not(:focus):empty {
													align-content: center;
													font-size: 75%;
													padding: 0.25em 0;

													&::before {
														pointer-events: none;
														content: attr(placeholder);
														color: var(--shades-m-darker);
													}
												}
											}
										}
									}
								}
							}
						}

						> :has(table) {
							overflow-y: scroll;
							max-height: 16rem;
							padding: calc(var(--padding) / 2);
							border-radius: 1.5rem;
							--table-background: color-mix(in srgb, var(--shades-darkest), var(--panel-background) 75%);
							background-color: var(--table-background);
							scrollbar-width: 0.75rem;
							
							> table {
								width: 100%;
								font-size: 0.75rem;
								color: var(--shades-medium);

								> colgroup > col:last-child {
									width: 0;
								}

								> thead {
									tr {
										&:first-child th {
											font-weight: normal;
											color: var(--shades-darker);

											&:first-child {
												text-align: left;
											}
										}

										&:last-child th {
											font-weight: normal;
											color: var(--shades-m-darker);
										}
									}
								}

								> tbody {
									&:empty:before {
										content: "There are no errors.";
									}

									> tr {
										color: var(--shades-medium);
										cursor: pointer;
										font-weight: normal;
	
										&:hover {
											background-color: rgb(from var(--shades-em-darker) r g b / var(--opacity-low));
										}
	
										> td:not(:first-child) {
											text-align: center;
										}
									}
								}
							}

							--track-colour: color-mix(in srgb, var(--shades-black), var(--panel-background) 75%);
							--thumbnail-colour: var(--shades-m-darker);
							--scrollbar-padding: 4px;
							--scrollbar-width: 12px;

							/* Non-Standard Properties */
							@supports selector(::-webkit-scrollbar) {
							  &::-webkit-scrollbar {
								width: var(--scrollbar-width);
								height: var(--scrollbar-width);
							  }
						  
							  &::-webkit-scrollbar-thumb {
								background: var(--thumbnail-colour);
								border-radius: 999px;
								border: var(--scrollbar-padding) solid transparent;
								background-clip: padding-box;
							  }
						  
							  &::-webkit-scrollbar-track {
								background: var(--track-colour);
								border-radius: 999px;
							  }
							}
						  
							/* Standard Properties */
							@supports not selector(::-webkit-scrollbar) {
							  scrollbar-color: var(--thumbnail-colour) var(--track-colour);
							  scrollbar-width: thin;
							}
						}
					}

					> menu {
						display: inline-flex;
						padding: 0 4ch;
						justify-content: space-evenly;
						margin: 0;
					
						button {
							display: grid;
							--icon-size: 4rem;
							grid: var(--icon-size) / var(--icon-size);
							position: relative;
							padding: 0;
							border: none;
							background: none;
							border-radius: 999px;
							
							&:nth-of-type(1) > figure { clip-path: url(#iconGithub); }
							&:nth-of-type(2) > figure { clip-path: url(#iconHistory); }
							&:nth-of-type(3) > figure { clip-path: url(#iconSettings); }
							&:nth-of-type(4) > figure { clip-path: url(#iconBug); }
							&:nth-of-type(5) > figure { clip-path: url(#iconShareYourMind); }
							
							> * {
								border-radius: inherit;
								height: 100%;
								width: 100%;
							}
					
							> a {
								position: absolute;
								top: 0;
								left: 0;
								z-index: 999;
							}
					
							> figure {
								margin: 0;
								container-type: size;
								background: rgb(from white r g b / 0.25);
								
								> svg {
									contain: size;
									
									> clipPath {
										scale: 0.012;
										translate: -7cqw -11cqh;
									}
								}
								
								&.inner-cursor::after {
									height: 75cqh;
									width: 75cqw;
									filter: blur(1rem);
									background-color: white;
									animation: colour-rotate 3s infinite alternate-reverse;
								}
							}
						}
					
						.inner-cursor::after {
							pointer-events: none;
							border-radius: inherit;
							position: fixed;
							content: "";
							top: 0;
							left: 0;
							z-index: -999;
							translate: calc(var(--cursor-x-pos) - 50%) calc(var(--cursor-y-pos) - 50%);
						}
					}
				}

				> #mainContent {
					min-width: 0%;
					transition: min-width 5s;

					> #textSide {
						width: 0%;
						opacity: 0;
						padding: 0;
						transition: width 1s, opacity 1s, padding 1s;
						contain: size;
					}
					
					> #editorSide {
						width: 100%;
						align-content: center;
						padding: var(--padding);

						> #nestBtn {
							opacity: 0;
							transition: opacity 1s, pointer-events 0s 1s;
						}
 
						> #codeEditor {
							margin-left: auto;
							justify-content: center;
							width: calc(100vw - (5 * var(--padding)) - (58.441558ch * 1.232));
							max-width: 100%;
							height: auto;
							max-height: 100%;
							aspect-ratio: var(--total-width) / 7;
							animation: moveLeft 2s cubic-bezier(1, 0, 0.5, 1) both;

							/* moveLeft Animation Variables */
							& {
								--code-editor-height: (100cqh);
								--code-editor-width: (100%);
								--vertical-padding: (2 * var(--padding));
								--content-height: (var(--code-editor-height) - var(--vertical-padding));
								--combined-editor-width: ((var(--total-width) / 7) * var(--content-height));
								--difference-of-both-full-widths: (var(--code-editor-width) - var(--combined-editor-width));
								--align-left: (0% - (var(--difference-of-both-full-widths) / 2));
								--single-editor-width: ((var(--editor-width) / var(--total-width)) * var(--combined-editor-width));
								/* translate: calc(var(--align-left) + var(--code-editor-width) - var(--single-editor-width)); */
							}
							
							#editorGap {
								height: 100%;
								aspect-ratio: var(--gutter-width) / 6.625;
							}

							.editorWrapper#inputEditorWrapper > #shadowEditorsWrapper > .shadowEditorWrapper {
								translate: 0 !important;
								opacity: 0 !important;
								transition: 2s;
							}
						}
					}
				}
			}
		}

		> article {
			font-size: 1rem;
			height: 100%;
			display: flex;
			flex-direction: column;
			gap: min(50dvh, 800px);

			> section, > a > section {
				contain: size;
				position: relative;
				height: min(100dvh, 1600px);

				&#reducingBoilerplateCode {
					> a {
						margin: 0;
						position: absolute;
						top: 0.75em;
						right: 0;
						color: var(--shades-white);
						text-decoration: none;
						text-transform: uppercase;
						line-height: 100%;
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 500;
						font-size: 2em;
						display: flex;
						align-items: center;
						gap: 1ch;

						&::after {
							position: relative;
							content: '';
							height: 0.125em;
							width: 6em;
							background: var(--shades-white);
						}
					}

					> #repeatingText {
						margin: 0;
						position: absolute;
						top: 8em;
						left: 4em;
						cursor: text;
						color: var(--shades-white);
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 300;
						font-size: 2em;
						width: 52ch;
						
						.repeat {
							animation: repeatText 2s linear infinite;
							position: relative;
							z-index: -1;
							padding-top: 3.8lh;
						}
					}

					> #parallaxText {
						position: absolute;
						bottom: calc(4em / 3);
						right: calc(4em / 3);
						color: var(--shades-white);
						text-transform: uppercase;
						letter-spacing: calc(1em / 6);
						font-family: "Orelo Semi Expanded", sans-serif;
						font-size: 6em;
						height: 3lh;
						width: fit-content;
						display: flex;
						flex-direction: column;
						
						> span {
						height: 1lh;
						overflow: hidden;
						line-height: 100%;
						text-shadow: 0 -1lh;
						animation: swapText linear;
						animation-timeline: view();
						
							&:nth-child(1) {
							margin-left: 0.5ch;
								text-align: left;
								animation-range-start: cover -0.5lh;
								animation-range-end: contain calc(min(100dvh, 1600px) + -0.5lh);
							}
					
							&:nth-child(2) {
								text-align: center;
								animation-range-start: cover 0lh;
								animation-range-end: contain calc(min(100dvh, 1600px) + 0lh);
							}
					
							&:nth-child(3) {
								margin-right: 0.5ch;
								text-align: right;
								animation-range-start: cover 0.5lh;
								animation-range-end: contain calc(min(100dvh, 1600px) + 0.5lh);
							}
						}
					}
				}
			
				&#easierMaintenance {
					> #mergingText {
						position: absolute;
						top: calc(4em / 5);
						left: 50%;
						translate: -50%;
						color: var(--shades-white);
						text-align: center;
						text-transform: capitalize;
						letter-spacing: 0.25ch;
						font-family: "Orelo Semi Expanded", sans-serif;
						font-size: 5em;
						display: flex;
						flex-direction: column;
						
						> span {
							height: 1lh;
							padding-top: 1lh;
							line-height: 100%;
							overflow: hidden;
							position: relative;

							&:first-child {
								text-shadow: 0 0lh;
								animation: showText linear forwards;
								animation-timeline: view();
								animation-range-start: cover calc(min(50dvh, 800px) + 0.15lh);
								animation-range-end: cover calc(min(100dvh, 1600px) - 2lh);
							}

							&:last-child {
								text-shadow: 0 -2lh;
								animation: showText linear forwards;
								animation-timeline: view();
								animation-range-start: cover calc(min(50dvh, 800px) - 1lh);
								animation-range-end: cover calc(min(100dvh, 1600px) - 3.15lh);
							}
						}
					}

					> #changingText {
						position: absolute;
						right: 5vw;
						bottom: 6em;
						color: var(--shades-white);
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 300;
						font-size: 2em;
						width: 56ch;
						text-align: right;
						animation: slideDown linear both;
						animation-timeline: view();
						animation-range-start: cover;
						animation-range-end: contain 5lh;

						s {
							text-decoration: none;
							font-size: 0.75em;
							color: var(--red-colour-medium); /* oklch(0.75 0.13 15) */
							position: relative;
							display: inline-flex;
							overflow: hidden;
							
							&:nth-child(1) { --animation-delay: -1s }
							&:nth-child(3) { --animation-delay: 0s }
							&:nth-child(5) { --animation-delay: -1.5s }
							
							&::before {
								position: absolute;
								content: '';
								width: 100%;
								height: 0.1em;
								background: color-mix(in oklch, currentColor, var(--shades-white) 25%);
								top: 50%;
								animation: strikethrough 2.5s infinite var(--animation-delay);
								animation-timing-function: linear(0 0%, 0 1.8%, 0.01 3.6%, 0.03 6.35%, 0.07 9.1%, 0.13 11.4%, 0.19 13.4%, 0.27 15%, 0.34 16.1%, 0.54 18.35%, 0.66 20.6%, 0.72 22.4%, 0.77 24.6%, 0.81 27.3%, 0.85 30.4%, 0.88 35.1%, 0.92 40.6%, 0.94 47.2%, 0.96 55%, 0.98 64%, 0.99 74.4%, 1 86.4%, 1 100%);
							}
						
							+ b {
								text-decoration: none;
								font-weight: bold;
								color: oklch(from var(--red-colour-medium) l c calc(h + 135)); /* oklch(0.75 0.13 150) */
							}
						}
					}
				}
			
				&#improvedCodeReadability {
					> #backgroundText {
						margin: 0;
						color: var(--shades-white);
						contain: layout;
						pointer-events: none;
						font-size: 20em;
						line-height: 100%;
						font-family: "Orelo Semi Condensed", sans-serif;
						text-transform: capitalize;
						letter-spacing: 0.0025em;
						display: flex;
						flex-direction: column;
						position: relative;
						z-index: 1;
						
						span {
							margin-left: -4ch;
							padding: 0 calc(1em / 10);
							width: 100%;
							color: rgb(from var(--shades-white) r g b / var(--opacity-low));
							animation: slideIn ease-out forwards;
							animation-timeline: view();
							animation-range-start: cover -0.5lh;
							animation-range-end: cover calc(2lh + 2.5lh);
							position: relative;
					
							&:first-child {
								text-align: right;
								margin-left: 10ch;
								animation-range-start: cover 0lh;
								animation-range-end: cover calc(2.5lh + 2.5lh);
							}
							
							&:last-child {
								color: rgb(from var(--shades-white) r g b / var(--opacity-high));
								text-align: right;
								margin-left: 10ch;
								animation-range-start: cover -1.5lh;
								animation-range-end: cover calc(1.5lh + 2.5lh);
							}
						}
					}

					> #visibleText {
						position: absolute;
						z-index: 0;
						right: 7.5vw; 
						bottom: 8em;
						color: var(--shades-white);
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 300;
						font-size: 2em;
						line-height: 1.5em;
						width: 50ch;
						animation: boostUp linear forwards, slideUp linear forwards;
						animation-timeline: view(), view();
						animation-range-start: cover, contain 3lh;
						animation-range-end: contain 3lh, cover;
						
						b {
							font-size: 1.25em;
							line-height: inherit;
							transition: 0.5s cubic-bezier(0.18, 0.89, 0.32, 1.28);
					
							&:hover {
								line-height: inherit;
								font-size: 1.5em;
							}
					
							> span {
								transition: 0.125s;
					
								&:hover {
									color: var(--pri-colour-lightest);
								}
							}
						}
					}
				}
			
				&#groupingStylesTogether {
					align-content: center;

					> #groupedTextWrapper {
						width: fit-content;
						position: absolute;
						bottom: 25dvh;
						left: 10vw;
						z-index: 2;
						
						> #groupedText {
							color: var(--shades-white);
							margin: 0;
							text-transform: capitalize;
							letter-spacing: 0.15em;
							font-family: "Orelo Semi Expanded", sans-serif;
							font-size: 2em;
							padding: 1.5em 2em;
							display: flex;
							flex-direction: column;
							position: relative;
							z-index: 1;
							border: 0.125em dashed rgb(from var(--shades-white) r g b / var(--opacity-low));
							background: rgb(from var(--pri-colour-darkest) r g b / var(--opacity-high));
							
							& + #groupedText {
								top: 0;
								left: 0;
								position: absolute;
								z-index: -1;
								animation: lightenBackgroundColour linear backwards, changeCard 10s linear infinite 5s;
								animation-timeline: scroll(root), auto;
							}
						}
					}

					> #miniEditor {
						position: relative;
						margin-left: auto;
						margin-right: 7.5vw;
						display: flex;
						font-family: 'Fira Code', monospace;
						font-size: 2em;
						line-height: 1em;
						gap: 3ch;
						width: fit-content;
						color: var(--shades-white);
						
						> #lineNumbers {
							width: 2ch;
							opacity: 0.25;
							font-family: inherit;
							text-align: right;
						}
					
						> pre {
							opacity: 0.75;
							font-family: inherit;
							letter-spacing: 0.2em;
							margin: 0;
							--maxLines: 20;
							--activeLine: 1;
							--intensityPos: 100%;
							
							> div {
								padding-right: 5ch;
								
								&:first-child {
									position: relative;
					
									&::before {
										position: absolute;
										content: '';
										top: 0;
										right: 0;
										height: 100%;
										width: calc(100% + 5ch);
										background: linear-gradient(to right, transparent, var(--pri-colour-em-darker) calc(var(--intensityPos) - 20%), var(--pri-colour-m-darker) var(--intensityPos), var(--pri-colour-em-darker) calc(var(--intensityPos) + 20%), transparent);
										background: linear-gradient(to right, transparent, rgb(from var(--pri-colour-m-darker) r g b / var(--opacity-medium)) calc(var(--intensityPos) - 20%), rgb(from var(--pri-colour-darker) r g b / var(--opacity-medium)) var(--intensityPos), rgb(from var(--pri-colour-m-darker) r g b / var(--opacity-medium)) calc(var(--intensityPos) + 20%), transparent);
										z-index: -1;
										translate: 0 calc((clamp(1, var(--activeLine), var(--maxLines)) - 1) * 1lh);
										transition: 0.5s ease;
									}
								}
							}
						}
					
						/* Detect View */
						
						&.viewed, * { animation: none; }
						
						&:not(.viewed) {
							animation: viewed linear;
							animation-timeline: view();
							animation-range-start: contain;
							animation-range-end: cover calc(0% + 5lh);
							
							span { display: inline-block; }
							
							div :is(> div, span) {
								--charIndex: -4;
								animation: slideInLines linear forwards;
								animation-timeline: view();
								animation-range-start: cover 0%;
								animation-range-end: cover 5lh;
							}
						}
					}
				}
			
				&#mechanicsOfNesting {
					display: flex;

					&:has(.hover-animation) {
						&:has(> :not(#backToStart):hover) {
							cursor: none;
			
							> #nyssCursor {
								scale: 0.25;
								animation-duration: 1.5s;
							}
						}
			
						> #nyssCursor {
							opacity: 1;
							translate: calc(var(--cursor-x-pos) - 50%) calc(var(--cursor-y-pos) - 50%);
						}
					}

					> #nyssCursor {
						opacity: 0;
						pointer-events: none;
						position: absolute;
						z-index: 999;
						background-color: rgb(from var(--pri-colour-lightest) r g b / var(--opacity-low));
						border-radius: 50%;
						aspect-ratio: 1 / 1;
						font-size: 10em;
						padding: 0.0625em;
						height: auto;
						width: 1em;
						translate: -50% -50%;
						transition: translate .2s, opacity 1s 0.1s, scale 0.5s;
						animation: rotate 12.5s linear infinite;
					}

					> #splittingText {
						position: absolute;
						top: 4lh;
						right: 8ch;
						color: var(--shades-white);
						font-family: 'Poppins', 'Calibri', sans-serif;
						font-weight: 300;
						font-size: 1.75em;
						width: 64ch;
						text-align: justify;
						text-align-last: justify;
						column-count: 2;
						gap: 6ch;
						word-spacing: 0.7ch;
						overflow: hidden;
						animation: widenGap 3s ease-in-out infinite alternate backwards, unblur ease-out both;
						animation-timeline: auto, view();
						animation-range-start: normal, cover;
						animation-range-end: normal, contain calc(min(50dvh, 800px));
					}

					> #strechingText {
						position: absolute;
						top: calc(4em / 3);
						left: calc(8em / 3);
						color: var(--shades-white);
						font-family: 'Orelo Semi Condensed';
						font-weight: 600;
						font-size: 3em;
						scale: 1;
						animation: moveDown linear both;
						animation-timeline: view();
						animation-range-start: cover -2lh;
						animation-range-end: cover 2lh;
					
						> span {
							display: inline-block;
							transition: 1s;
							
							&:hover {
								scale: 1 2;
								transition: 0s;
							}
						}
					}

					> #nestingText { /* Click anywhere text fades up and and behind the "Nest your CSS" text */
						position: absolute;
						bottom: calc(8em / 5);
						right: calc(24em / 5);
						color: var(--shades-white);
						font-size: 5em;
						contain: layout;

						> * {
							margin: 0;
							white-space: nowrap;
						}

						> h1 {
							font-size: 1em;
							font-weight: 900;
							font-family: 'Poppins', 'Calibri', sans-serif;
							animation: moveDown linear both;
							animation-timeline: view();
							animation-range-start: cover -2lh;
							animation-range-end: cover 2lh;
							transition: scale 1s, text-shadow 1s;
							
							&:hover {
								scale: 1.1;
								text-shadow: 0 -0.1lh calc(1em / 5) var(--shades-black);
							}
						}

						> p {
							position: absolute;
							z-index: -1;
							top: 0;
							left: 0;
							line-height: 1em;
							font-size: 1.125em;
							font-weight: 600;
							letter-spacing: -0.05em;
							font-family: 'Orelo Expanded';
							color: rgb(from var(--shades-white) r g b / var(--opacity-medium));
							animation: fadeUp linear both;
							animation-timeline: view();
							animation-range-start: cover;
							animation-range-end: cover calc(1lh + 1.98em);
						}

						a {
							color: unset;
							text-decoration: unset;
						}
					}

					> button#nycssLogoGroup {
						/* Removing Default Button Styling */
						background: none;
						border: none;
						margin: 0;
						padding: 0;
						align-items: normal;
						cursor: pointer;
						font-size: unset;

						&#nycssLogoGroup {
							align-self: flex-end;
							contain: layout;
							display: inline-flex;
							flex-direction: column;
							margin-left: 8vw;
							margin-bottom: 8vw;
							position: relative;
							z-index: 1;

							> * { pointer-events: none; }
					
							> img {
								height: 16em;
							}
					
							#nycssNest {
								color: transparent;
								filter: drop-shadow(0 -0.5em) drop-shadow(0.7em 0.3em) drop-shadow(5.4em 1em) drop-shadow(7.1em 1.1em) drop-shadow(1.6em 0.4em) drop-shadow(4.3em 0.9em);
								clip-path: circle(47.2%);
							}
					
							#nycssBadge {
								pointer-events: none;
								filter: drop-shadow(0 var(--shadow-distance) 0 var(--shadow-color)) drop-shadow(0 calc(-1 * var(--shadow-distance)) 0 var(--shadow-color));
								--shadow-color: #1474B833; /* Taken directly from the CSS Logo */
								--shadow-distance: 0;
								transition: 1s;
					
								&.main-animation {
									animation: fall linear;
									animation-timeline: scroll(root);
								}
					
								&.idle-animation {
									animation: fall linear, idle 2.5s infinite alternate;
									animation-timeline: scroll(root), auto; /* convert to view() if possible */
									animation-composition: add;
								}
					
								&.hover-animation {
									animation: hover 2s infinite alternate;
									--shadow-color: #1474B833; /* Taken directly from the CSS Logo */
									--shadow-distance: 1.5em;
								}
							}
					
							&:has(.hover-animation) {
								clip-path: inset(19.3% 1.3% 1.3% 7.3%);
					
								&:hover #nycssBadge.hover-animation {
									--shadow-color: #26A2D933; /* Taken directly from the CSS Logo */
									--shadow-distance: 2em;
								}
							}
						}
					}

					> #backToStart {
						position: absolute;
						top: 0;
						left: 0;
						height: 100%;
						width: 100%;
					}
				}
			}
		}
	}
}

/* 1235 x 1125 - Breaking point between mobile & desktop */
@media (max-aspect-ratio: 1.097 / 1) {
	body > #siteWrapper > main {
		> #mainContent {
			border-radius: 1rem;
		}

		&:not(.nesting) > #mainContent {
			justify-content: center;

			#inputEditorWrapper { && {
				border: none;
				border-radius: 1rem;
				background: none;
				padding: 0;
			}}
		}

		&.nesting > #mainSettings, > #mainContent :is(#textSide, #shadowEditorsWrapper) {
			display: none;
		}

		&.nesting.fade-out {
			> #mainContent > #editorSide {
				width: 100%;
				padding: 0;

				> #codeEditor {
					width: 100%;
					animation: fadeOut 1s cubic-bezier(1, 0, 0.5, 1);
	
					> :not(:first-child) { display: none; }

					.editor {
						inset: -0.25rch 0;
					}
				}
			}
		}

		&.nesting:not(.fade-out) {
			> #mainContent {
				min-width: 100%;
				transition: unset;
				
				> #editorSide {
					/* 
					* Remove the slide in animation, just make it fade out & fade in
					* And make the editors stack on top of each other, aspect-ratio
					* can be ignored - just fill the screen
					*/

					> #codeEditor {
						height: 100%;
						width: 100%;
						animation: fadeOut 1s cubic-bezier(1, 0, 0.5, 1) 1s reverse;
						flex-direction: column;
	
						#editorGap {
							height: var(--padding);
							aspect-ratio: auto;
							flex: none;
						}
	
						.editorWrapper {
							&#inputEditorWrapper,
							&#outputEditorWrapper {
								flex: 1;
							}
						}

						.editorGroup {
							aspect-ratio: auto;
						}

						.editor {
							height: 100%;
							width: 100%;
							aspect-ratio: auto;
						}
					}
				}
			}
		}
	}
	
	body > #siteWrapper > article {
		font-size: clamp(1.1px, 1.15dvw, 22.5px);

		> section, > a > section {
			contain: size;
			position: relative;
			height: min(100dvh, 1600px);

			&#reducingBoilerplateCode {
				> #repeatingText {
					top: 50%;
					translate: 0 calc(-50% - 7.5em);
				}

				> #parallaxText {
					bottom: 50%;
					translate: 0 calc(-50% + 6em);
				}
			}
		
			&#easierMaintenance {
				> #mergingText {
					top: calc(4em / 3);
				}

				> #changingText {
					bottom: 50%;
					translate: 0 calc(-50% + 5em);
				}
			}
		
			&#improvedCodeReadability {
				> #backgroundText {
					top: 50%;
					translate: 0 -50%;
				}

				> #visibleText {
					top: 50%;
					translate: 0 -25%;
				}
			}
		
			&#groupingStylesTogether {
				> #groupedTextWrapper {
					bottom: 10%;
				}
			}
		
			&#mechanicsOfNesting {
				> #splittingText {
					top: 50%;
					translate: 0 calc(-50% - 12.5em);
				}
				
				> #strechingText {
					top: 50%;
					translate: 0 calc(-50% - 12.5em);
					animation: none;
				}

				> #nestingText {
					bottom: calc(32em / 5);
				}
			}
		}
	}
}